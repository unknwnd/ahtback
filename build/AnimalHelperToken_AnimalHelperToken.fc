#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; AnimalHelperToken_AnimalHelperToken.headers.fc
;;
;; Header files for AnimalHelperToken
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $JettonData$_store
builder $JettonData$_store(builder build_0, (int, int, slice, cell, cell, int) v) inline;

;; $JettonData$_store_cell
cell $JettonData$_store_cell((int, int, slice, cell, cell, int) v) inline;

;; $GetWalletAddress$_load_without_opcode
(slice, ((slice))) $GetWalletAddress$_load_without_opcode(slice sc_0) inline;

;; $UpdateContentMessage$_load_without_opcode
(slice, ((int, cell))) $UpdateContentMessage$_load_without_opcode(slice sc_0) inline;

;; $AnimalHelperToken$_store
builder $AnimalHelperToken$_store(builder build_0, (int, int, int, slice, cell, cell, int, slice, slice) v) inline;

;; $AnimalHelperToken$_load
(slice, ((int, int, int, slice, cell, cell, int, slice, slice))) $AnimalHelperToken$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $AnimalHelperToken$init$_load
(slice, ((slice, cell, cell, slice, slice))) $AnimalHelperToken$init$_load(slice sc_0) inline;

;; $AnimalHelperToken$_contract_init
(int, int, int, slice, cell, cell, int, slice, slice) $AnimalHelperToken$_contract_init(slice $owner, cell $content, cell $walletCode, slice $teamVestingContract, slice $tokenSaleContract) impure inline;

;; $AnimalHelperToken$_contract_load
(int, int, int, slice, cell, cell, int, slice, slice) $AnimalHelperToken$_contract_load() impure inline;

;; $AnimalHelperToken$_contract_store
() $AnimalHelperToken$_contract_store((int, int, int, slice, cell, cell, int, slice, slice) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $StateInit$_constructor_code_data
((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $AnimalHelperToken$_fun_calculateWalletInit
((int, int, int, slice, cell, cell, int, slice, slice), (cell, cell)) $AnimalHelperToken$_fun_calculateWalletInit((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $owner) impure inline_ref;

;; $AnimalHelperToken$_fun_calculate_user_wallet_address
((int, int, int, slice, cell, cell, int, slice, slice), slice) $AnimalHelperToken$_fun_calculate_user_wallet_address((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $owner) impure inline_ref;

;; $AnimalHelperToken$_fun_mint
((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_mint((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $to, int $amount, int $queryId) impure inline_ref;

;; $AnimalHelperToken$_fun_get_wallet_address
((int, int, int, slice, cell, cell, int, slice, slice), slice) $AnimalHelperToken$_fun_get_wallet_address((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $owner) impure inline_ref;

;; $AnimalHelperToken$_fun_forward
((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_forward((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $AnimalHelperToken$_fun_notify
((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_notify((int, int, int, slice, cell, cell, int, slice, slice) $self, cell $body) impure inline;

;; $AnimalHelperToken$_fun_requireOwner
((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_requireOwner((int, int, int, slice, cell, cell, int, slice, slice) $self) impure inline_ref;

;; $AnimalHelperToken$_fun_owner
((int, int, int, slice, cell, cell, int, slice, slice), slice) $AnimalHelperToken$_fun_owner((int, int, int, slice, cell, cell, int, slice, slice) $self) impure inline_ref;

;; $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate
((int, int, slice, cell, cell, int)) $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate(int $totalSupply, int $mintable, slice $owner, cell $content, cell $walletCode, int $tokenRate) inline;

;; $AnimalHelperToken$_fun_get_jetton_data
((int, int, int, slice, cell, cell, int, slice, slice), (int, int, slice, cell, cell, int)) $AnimalHelperToken$_fun_get_jetton_data((int, int, int, slice, cell, cell, int, slice, slice) $self) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;


;; AnimalHelperToken_AnimalHelperToken.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

builder $Builder$_fun_storeBit(int $value, builder $self) impure asm """
    1 STI
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_forward((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), ());
}

((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_notify((int, int, int, slice, cell, cell, int, slice, slice) $self, cell $body) impure inline {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), ());
}

((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_requireOwner((int, int, int, slice, cell, cell, int, slice, slice) $self) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    throw_unless(132, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), ());
}

((int, int, int, slice, cell, cell, int, slice, slice), slice) $AnimalHelperToken$_fun_owner((int, int, int, slice, cell, cell, int, slice, slice) $self) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    var $fresh$ret_16 = $self'owner;
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), $fresh$ret_16);
}

;; AnimalHelperToken_AnimalHelperToken.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

((cell, cell)) $StateInit$_constructor_code_data(cell $code, cell $data) inline {
    return ($code, $data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: JettonData
;; TLB: _ totalSupply:int257 mintable:bool owner:address content:^cell walletCode:^cell tokenRate:int257 = JettonData
;;

builder $JettonData$_store(builder build_0, (int, int, slice, cell, cell, int) v) inline {
    var (v'totalSupply, v'mintable, v'owner, v'content, v'walletCode, v'tokenRate) = v;
    build_0 = build_0.store_int(v'totalSupply, 257);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_ref(v'content);
    build_0 = build_0.store_ref(v'walletCode);
    build_0 = build_0.store_int(v'tokenRate, 257);
    return build_0;
}

cell $JettonData$_store_cell((int, int, slice, cell, cell, int) v) inline {
    return $JettonData$_store(begin_cell(), v).end_cell();
}

((int, int, slice, cell, cell, int)) $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate(int $totalSupply, int $mintable, slice $owner, cell $content, cell $walletCode, int $tokenRate) inline {
    return ($totalSupply, $mintable, $owner, $content, $walletCode, $tokenRate);
}

;;
;; Type: GetWalletAddress
;; Header: 0xc5b31108
;; TLB: get_wallet_address#c5b31108 owner_address:address = GetWalletAddress
;;

(slice, ((slice))) $GetWalletAddress$_load_without_opcode(slice sc_0) inline {
    var v'owner_address = sc_0~load_msg_addr();
    return (sc_0, (v'owner_address));
}

;;
;; Type: UpdateContentMessage
;; Header: 0x54a249e0
;; TLB: update_content_message#54a249e0 queryId:int257 new_content:^cell = UpdateContentMessage
;;

(slice, ((int, cell))) $UpdateContentMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'new_content = sc_0~load_ref();
    return (sc_0, (v'queryId, v'new_content));
}

;;
;; Type: AnimalHelperToken
;; TLB: _ totalSupply:int257 maxSupply:int257 mintable:bool owner:address content:^cell walletCode:^cell tokenRate:int257 teamVestingContract:address tokenSaleContract:address = AnimalHelperToken
;;

builder $AnimalHelperToken$_store(builder build_0, (int, int, int, slice, cell, cell, int, slice, slice) v) inline {
    var (v'totalSupply, v'maxSupply, v'mintable, v'owner, v'content, v'walletCode, v'tokenRate, v'teamVestingContract, v'tokenSaleContract) = v;
    build_0 = build_0.store_int(v'totalSupply, 257);
    build_0 = build_0.store_int(v'maxSupply, 257);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_ref(v'content);
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(v'walletCode);
    build_1 = build_1.store_int(v'tokenRate, 257);
    build_1 = build_1.store_slice(v'teamVestingContract);
    build_1 = build_1.store_slice(v'tokenSaleContract);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, slice, cell, cell, int, slice, slice))) $AnimalHelperToken$_load(slice sc_0) inline {
    var v'totalSupply = sc_0~load_int(257);
    var v'maxSupply = sc_0~load_int(257);
    var v'mintable = sc_0~load_int(1);
    var v'owner = sc_0~load_msg_addr();
    var v'content = sc_0~load_ref();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'walletCode = sc_1~load_ref();
    var v'tokenRate = sc_1~load_int(257);
    var v'teamVestingContract = sc_1~load_msg_addr();
    var v'tokenSaleContract = sc_1~load_msg_addr();
    return (sc_0, (v'totalSupply, v'maxSupply, v'mintable, v'owner, v'content, v'walletCode, v'tokenRate, v'teamVestingContract, v'tokenSaleContract));
}

(slice, ((slice, cell, cell, slice, slice))) $AnimalHelperToken$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'content = sc_0~load_ref();
    var v'walletCode = sc_0~load_ref();
    var v'teamVestingContract = sc_0~load_msg_addr();
    var v'tokenSaleContract = sc_0~load_msg_addr();
    return (sc_0, (v'owner, v'content, v'walletCode, v'teamVestingContract, v'tokenSaleContract));
}

(int, int, int, slice, cell, cell, int, slice, slice) $AnimalHelperToken$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$AnimalHelperToken$_load();
    }
    else {
        (slice $owner, cell $content, cell $walletCode, slice $teamVestingContract, slice $tokenSaleContract) = $sc~$AnimalHelperToken$init$_load();
        $sc.end_parse();
        return $AnimalHelperToken$_contract_init($owner, $content, $walletCode, $teamVestingContract, $tokenSaleContract);
    }
}

() $AnimalHelperToken$_contract_store((int, int, int, slice, cell, cell, int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $AnimalHelperToken$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract AnimalHelperToken functions
;;

(int, int, int, slice, cell, cell, int, slice, slice) $AnimalHelperToken$_contract_init(slice $owner, cell $content, cell $walletCode, slice $teamVestingContract, slice $tokenSaleContract) impure inline {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = (null(), 1000000000000000000, false, null(), null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'content = $content;
    $self'walletCode = $walletCode;
    $self'tokenRate = 0;
    $self'totalSupply = $self'maxSupply;
    $self'teamVestingContract = $teamVestingContract;
    $self'tokenSaleContract = $tokenSaleContract;
    return ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract);
}

((int, int, int, slice, cell, cell, int, slice, slice), (cell, cell)) $AnimalHelperToken$_fun_calculateWalletInit((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $owner) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    var $fresh$ret_14 = $StateInit$_constructor_code_data($self'walletCode, $Builder$_fun_endCell($Builder$_fun_storeAddress($Builder$_fun_storeAddress($global_beginCell(), $global_myAddress()), $owner)));
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), $fresh$ret_14);
}

((int, int, int, slice, cell, cell, int, slice, slice), slice) $AnimalHelperToken$_fun_calculate_user_wallet_address((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $owner) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    var ($data'code, $data'data) = ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_calculateWalletInit($owner);
    var $fresh$ret_13 = $global_contractAddress(($data'code, $data'data));
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), $fresh$ret_13);
}

((int, int, int, slice, cell, cell, int, slice, slice), ()) $AnimalHelperToken$_fun_mint((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $to, int $amount, int $queryId) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    slice $userWallet = ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_calculate_user_wallet_address($to);
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body($userWallet, true, 50000000, 1, $Builder$_fun_endCell($Builder$_fun_storeBit(false, $Builder$_fun_storeCoins($Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeCoins(store_uint(store_uint($global_beginCell(), 395134233, 32), $queryId, 64), $amount), $global_myAddress()), $global_myAddress()), 0)))));
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), ());
}

((int, int, int, slice, cell, cell, int, slice, slice), slice) $AnimalHelperToken$_fun_get_wallet_address((int, int, int, slice, cell, cell, int, slice, slice) $self, slice $owner) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    var $fresh$ret_15 = ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_calculate_user_wallet_address($owner);
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), $fresh$ret_15);
}

((int, int, int, slice, cell, cell, int, slice, slice), (int, int, slice, cell, cell, int)) $AnimalHelperToken$_fun_get_jetton_data((int, int, int, slice, cell, cell, int, slice, slice) $self) impure inline_ref {
    var (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)) = $self;
    var $fresh$ret_17 = $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate($self'totalSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate);
    return (($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract), $fresh$ret_17);
}

;;
;; Get methods of a Contract AnimalHelperToken
;;

_ %get_wallet_address(slice $owner) method_id(103289) {
    slice $owner = $owner;
    var self = $AnimalHelperToken$_contract_load();
    var res = self~$AnimalHelperToken$_fun_get_wallet_address($owner);
    return res;
}

_ %owner() method_id(83229) {
    var self = $AnimalHelperToken$_contract_load();
    var res = self~$AnimalHelperToken$_fun_owner();
    return res;
}

;;
;; Routing of a Contract AnimalHelperToken
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract) = $AnimalHelperToken$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive UpdateContentMessage message
        if (op == 1419921888) {
            var ($msg'queryId, $msg'new_content) = in_msg~$UpdateContentMessage$_load_without_opcode();
            ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_requireOwner();
            $self'content = $msg'new_content;
            $AnimalHelperToken$_contract_store(($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract));
            return ();
        }
        
        ;; Receive Deploy message
        if (op == 0x946a98b6) {
            var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
            ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
            $AnimalHelperToken$_contract_store(($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract));
            return ();
        }
        
        ;; Receive GetWalletAddress message
        if (op == 3316846856) {
            var ($msg'owner_address) = in_msg~$GetWalletAddress$_load_without_opcode();
            slice $owner = $msg'owner_address;
            slice $walletAddress = ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_calculate_user_wallet_address($owner);
            $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 66, $Builder$_fun_endCell($Builder$_fun_storeAddress($global_beginCell(), $walletAddress))));
            $AnimalHelperToken$_contract_store(($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "mint_initial" message
    if (text_op == 0x48d5d45447b8178d68743670ce5c7974685d5cb816f9efcc4cc9ac5bd7953d3d) {
        ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_requireOwner();
        throw_unless(50322, ($self'totalSupply == $self'maxSupply));
        int $teamAmount = ($self'maxSupply / 10);
        int $saleAmount = ($self'maxSupply - $teamAmount);
        ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_mint($self'teamVestingContract, $teamAmount, 0);
        ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_mint($self'tokenSaleContract, $saleAmount, 1);
        $AnimalHelperToken$_contract_store(($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract));
        return ();
    }
    ;; Receive "get_jetton_data" message
    if (text_op == 0x9b1069dd0fbb446d0a0d52fd0dfe62942d9bd22999dbd96036f691d9e796562d) {
        var ($data'totalSupply, $data'mintable, $data'owner, $data'content, $data'walletCode, $data'tokenRate) = ($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract)~$AnimalHelperToken$_fun_get_jetton_data();
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 66, $Builder$_fun_endCell($Builder$_fun_storeRef($JettonData$_store_cell(($data'totalSupply, $data'mintable, $data'owner, $data'content, $data'walletCode, $data'tokenRate)), $global_beginCell()))));
        $AnimalHelperToken$_contract_store(($self'totalSupply, $self'maxSupply, $self'mintable, $self'owner, $self'content, $self'walletCode, $self'tokenRate, $self'teamVestingContract, $self'tokenSaleContract));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}
