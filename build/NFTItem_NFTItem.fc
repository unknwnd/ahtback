#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; NFTItem_NFTItem.headers.fc
;;
;; Header files for NFTItem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $InitNFTMessage$_load_without_opcode
(slice, ((int, slice))) $InitNFTMessage$_load_without_opcode(slice sc_0) inline;

;; $GetNFTDataMessage$_load_without_opcode
(slice, (tuple)) $GetNFTDataMessage$_load_without_opcode(slice sc_0) inline;

;; $TransferMessage$_load_without_opcode
(slice, ((slice, slice, cell))) $TransferMessage$_load_without_opcode(slice sc_0) inline;

;; $ExchangeMessage$_load_without_opcode
(slice, ((slice, int))) $ExchangeMessage$_load_without_opcode(slice sc_0) inline;

;; $NFTItem$_store
builder $NFTItem$_store(builder build_0, (slice, int, slice) v) inline;

;; $NFTItem$_load
(slice, ((slice, int, slice))) $NFTItem$_load(slice sc_0) inline;

;; $NFTItem$init$_load
(slice, ((slice, int))) $NFTItem$init$_load(slice sc_0) inline;

;; $NFTItem$_contract_init
(slice, int, slice) $NFTItem$_contract_init(slice $collection, int $index) impure inline;

;; $NFTItem$_contract_load
(slice, int, slice) $NFTItem$_contract_load() impure inline;

;; $NFTItem$_contract_store
() $NFTItem$_contract_store((slice, int, slice) v) impure inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_value_mode
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;


;; NFTItem_NFTItem.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

builder $global_beginCell() impure asm """
    NEWC
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

;; NFTItem_NFTItem.constants.fc
;; EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c
slice __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c() asm """
    B{b5ee9c72410101010024000043800000000000000000000000000000000000000000000000000000000000000000104aec829d} B>boc <s PUSHSLICE
""";

;; NFTItem_NFTItem.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return ($mode, null(), null(), null(), $value, $to, true);
}

;;
;; Type: InitNFTMessage
;; Header: 0x1088c6b8
;; TLB: init_nft_message#1088c6b8 op:uint32 new_owner:address = InitNFTMessage
;;

(slice, ((int, slice))) $InitNFTMessage$_load_without_opcode(slice sc_0) inline {
    var v'op = sc_0~load_uint(32);
    var v'new_owner = sc_0~load_msg_addr();
    return (sc_0, (v'op, v'new_owner));
}

;;
;; Type: GetNFTDataMessage
;; Header: 0xeeb28158
;; TLB: get_nft_data_message#eeb28158  = GetNFTDataMessage
;;

(slice, (tuple)) $GetNFTDataMessage$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: TransferMessage
;; Header: 0x137f6c38
;; TLB: transfer_message#137f6c38 to:address response_destination:address custom_payload:Maybe ^cell = TransferMessage
;;

(slice, ((slice, slice, cell))) $TransferMessage$_load_without_opcode(slice sc_0) inline {
    var v'to = sc_0~load_msg_addr();
    var v'response_destination = sc_0~load_msg_addr();
    var v'custom_payload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'to, v'response_destination, v'custom_payload));
}

;;
;; Type: ExchangeMessage
;; Header: 0xe5e554e5
;; TLB: exchange_message#e5e554e5 token_wallet:address min_token_amount:coins = ExchangeMessage
;;

(slice, ((slice, int))) $ExchangeMessage$_load_without_opcode(slice sc_0) inline {
    var v'token_wallet = sc_0~load_msg_addr();
    var v'min_token_amount = sc_0~load_varuint16();
    return (sc_0, (v'token_wallet, v'min_token_amount));
}

;;
;; Type: NFTItem
;; TLB: _ collection:address index:int257 owner:address = NFTItem
;;

builder $NFTItem$_store(builder build_0, (slice, int, slice) v) inline {
    var (v'collection, v'index, v'owner) = v;
    build_0 = build_0.store_slice(v'collection);
    build_0 = build_0.store_int(v'index, 257);
    build_0 = build_0.store_slice(v'owner);
    return build_0;
}

(slice, ((slice, int, slice))) $NFTItem$_load(slice sc_0) inline {
    var v'collection = sc_0~load_msg_addr();
    var v'index = sc_0~load_int(257);
    var v'owner = sc_0~load_msg_addr();
    return (sc_0, (v'collection, v'index, v'owner));
}

(slice, ((slice, int))) $NFTItem$init$_load(slice sc_0) inline {
    var v'collection = sc_0~load_msg_addr();
    var v'index = sc_0~load_int(257);
    return (sc_0, (v'collection, v'index));
}

(slice, int, slice) $NFTItem$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NFTItem$_load();
    }
    else {
        (slice $collection, int $index) = $sc~$NFTItem$init$_load();
        $sc.end_parse();
        return $NFTItem$_contract_init($collection, $index);
    }
}

() $NFTItem$_contract_store((slice, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $NFTItem$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract NFTItem functions
;;

(slice, int, slice) $NFTItem$_contract_init(slice $collection, int $index) impure inline {
    var (($self'collection, $self'index, $self'owner)) = (null(), null(), null());
    $self'collection = $collection;
    $self'index = $index;
    $self'owner = $collection;
    return ($self'collection, $self'index, $self'owner);
}

;;
;; Get methods of a Contract NFTItem
;;

;;
;; Routing of a Contract NFTItem
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'collection, $self'index, $self'owner) = $NFTItem$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive InitNFTMessage message
    if (op == 277399224) {
        var ($msg'op, $msg'new_owner) = in_msg~$InitNFTMessage$_load_without_opcode();
        throw_unless(42435, ( equal_slices_bits($self'collection, __tact_context_get_sender()) ));
        throw_unless(6105, ($msg'op == 1));
        slice $newOwner = $msg'new_owner;
        $self'owner = $newOwner;
        $NFTItem$_contract_store(($self'collection, $self'index, $self'owner));
        return ();
    }
    
    ;; Receive GetNFTDataMessage message
    if (op == 4004675928) {
        var $msg = in_msg~$GetNFTDataMessage$_load_without_opcode();
        cell $content = $Builder$_fun_endCell(store_uint($global_beginCell(), $self'index, 64));
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 66, $Builder$_fun_endCell($Builder$_fun_storeRef($content, $Builder$_fun_storeAddress($Builder$_fun_storeAddress(store_uint($global_beginCell(), $self'index, 64), $self'collection), $self'owner)))));
        $NFTItem$_contract_store(($self'collection, $self'index, $self'owner));
        return ();
    }
    
    ;; Receive TransferMessage message
    if (op == 327117880) {
        var ($msg'to, $msg'response_destination, $msg'custom_payload) = in_msg~$TransferMessage$_load_without_opcode();
        throw_unless(42435, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        slice $to = $msg'to;
        slice $responseDestination = $msg'response_destination;
        cell $customPayload = $msg'custom_payload;
        $self'owner = $to;
        if (( ~ equal_slices_bits(__gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), $responseDestination) )) {
            cell $payload = $Builder$_fun_endCell($global_beginCell());
            if ((~ null?($customPayload))) {
                $payload = __tact_not_null($customPayload);
            }
            $global_send($SendParameters$_constructor_to_value_mode_body($responseDestination, 0, 66, $Builder$_fun_endCell($Builder$_fun_storeRef($payload, $Builder$_fun_storeAddress(store_uint(store_uint($global_beginCell(), 2027342075, 32), 0, 64), __tact_context_get_sender())))));
        }
        $NFTItem$_contract_store(($self'collection, $self'index, $self'owner));
        return ();
    }
    
    ;; Receive ExchangeMessage message
    if (op == 3857011941) {
        var ($msg'token_wallet, $msg'min_token_amount) = in_msg~$ExchangeMessage$_load_without_opcode();
        throw_unless(42435, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        slice $tokenWallet = $msg'token_wallet;
        int $minTokenAmount = $msg'min_token_amount;
        int $tokenAmount = 5000;
        throw_unless(63426, ($minTokenAmount <= $tokenAmount));
        $self'owner = $self'collection;
        $global_send($SendParameters$_constructor_to_bounce_value_mode_body($tokenWallet, true, 50000000, 2, $Builder$_fun_endCell($Builder$_fun_storeAddress($Builder$_fun_storeCoins(store_uint(store_uint($global_beginCell(), 1935855772, 32), 0, 64), $tokenAmount), __tact_context_get_sender()))));
        $global_send($SendParameters$_constructor_to_bounce_value_mode_body($self'collection, true, 0, 66, $Builder$_fun_endCell($Builder$_fun_storeCoins($Builder$_fun_storeAddress(store_uint(store_uint($global_beginCell(), 85167505, 32), $self'index, 64), __tact_context_get_sender()), $tokenAmount))));
        $NFTItem$_contract_store(($self'collection, $self'index, $self'owner));
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        if (( ~ equal_slices_bits($self'owner, __tact_context_get_sender()) )) {
            $global_send($SendParameters$_constructor_to_value_mode($self'owner, 0, 64));
        }
        $NFTItem$_contract_store(($self'collection, $self'index, $self'owner));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.
            
            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
            
            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot 
                swap
                
                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop 
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop 
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop 

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap
                
                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll 
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop 
                } 
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond
                
                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll 
                { 
                    // If the dict is empty, throw 11
                    11 THROWARG 
                } 
                { 
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX 
                } cond 
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}