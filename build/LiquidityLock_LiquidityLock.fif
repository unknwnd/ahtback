// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `C:/aht/charity-token/build/LiquidityLock_LiquidityLock.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $Deploy$_load_without_opcode
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $ReleaseTokensMessage$_load_without_opcode
  DECLPROC $UpdateLiquidityPoolMessage$_load_without_opcode
  DECLPROC $GetLockInfoMessage$_load_without_opcode
  DECLPROC $EmergencyReleaseMessage$_load_without_opcode
  DECLPROC $EmergencyWithdrawMessage$_load_without_opcode
  DECLPROC $LiquidityLock$_store
  DECLPROC $LiquidityLock$_load
  DECLPROC $StateInit$_not_null
  DECLPROC $Context$_get_value
  DECLPROC $LiquidityLock$init$_load
  DECLPROC $LiquidityLock$_contract_init
  DECLPROC $LiquidityLock$_contract_load
  DECLPROC $LiquidityLock$_contract_store
  DECLPROC $LiquidityLock$_fun_calculateAvailableToRelease
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $LiquidityLock$_fun_forward
  DECLPROC $LiquidityLock$_fun_notify
  DECLPROC $LiquidityLock$_fun_owner
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode_body
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode
  DECLPROC $DeployOk$_constructor_queryId
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $Deploy$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $ReleaseTokensMessage$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $UpdateLiquidityPoolMessage$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $GetLockInfoMessage$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $EmergencyReleaseMessage$_load_without_opcode PROCINLINE:<{
    LDVARUINT16
    LDREF
    -ROT
  }>
  $EmergencyWithdrawMessage$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $LiquidityLock$_store PROCINLINE:<{
    s8 s7 XCHG2
    STSLICER
    s0 s5 XCHG2
    STSLICER
    s1 s3 XCHG
    257 PUSHINT
    STIX
    SWAP
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    s0 s3 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    ENDC
    ROT
    STREF
    ENDC
    SWAP
    STREF
  }>
  $LiquidityLock$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    DROP
    s5 s8 XCHG
    s5 s7 XCHG
    s5 s6 XCHG
  }>
  $StateInit$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        2 UNTUPLE
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $LiquidityLock$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    257 PUSHINT
    LDIX
    3 -ROLL
  }>
  $LiquidityLock$_contract_init PROCINLINE:<{
    0 PUSHINT
    DUP
        NOW
    s0 s3 PUSH2
    ADD
    s0 s4 XCHG
    3 MULCONST
    1 RSHIFT#
    s4 s(-1) PUXC
    ADD
    s2 s0 s4 PUXC2
    s4 s4 XCHG2
    s0 s3 XCHG
  }>
  $LiquidityLock$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $LiquidityLock$_load INLINECALLDICT
      1 8 BLKDROP2
    }>ELSE<{
      $LiquidityLock$init$_load INLINECALLDICT
      s0 s3 XCHG
      ENDS
      ROT
      $LiquidityLock$_contract_init INLINECALLDICT
    }>
  }>
  $LiquidityLock$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    8 -ROLL
    $LiquidityLock$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $LiquidityLock$_fun_calculateAvailableToRelease PROCREF:<{
        NOW
    s5 PUSH
    LESS
    IFJMP:<{
      0 PUSHINT
    }>
        NOW
    s4 PUSH
    GEQ
    IFJMP:<{
      s2 s1 PUSH2
      SUB
    }>
    s3 s4 PUSH2
    SUB
        NOW
    s6 PUSH
    SUB
    100 MULCONST
    SWAP
    DIV
    s3 s(-1) PUXC
    MUL
    100 PUSHINT
    DIV
    s2 PUSH
    SUB
    0 PUSHINT
        MAX
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $LiquidityLock$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $LiquidityLock$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    FALSE
    PUSHNULL
    $LiquidityLock$_fun_forward INLINECALLDICT
  }>
  $LiquidityLock$_fun_owner PROCREF:<{
    s7 PUSH
  }>
  $SendParameters$_constructor_to_bounce_value_mode_body PROCINLINE:<{
    s1 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $SendParameters$_constructor_to_bounce_value_mode PROCINLINE:<{
    s0 s3 XCHG
    PUSHNULL
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  %owner PROC:<{
    $LiquidityLock$_contract_load INLINECALLDICT
    $LiquidityLock$_fun_owner INLINECALLDICT
    8 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $LiquidityLock$_contract_load INLINECALLDICT
    s0 s9 XCHG
    IFJMP:<{
      9 BLKDROP
    }>
    0 PUSHINT
    s8 PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 s8 XCHG
      32 LDU
      s0 s9 XCHG
    }>
    OVER
    1917540305 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s7 POP
      2429 PUSHINT
          NOW
      s4 PUSH
      GEQ
      THROWANYIFNOT
      11262 PUSHINT
      s1 s7 PUSH2
      GREATER
      THROWANYIFNOT
      s5 s7 XCHG
      2 5 BLKSWAP
      $LiquidityLock$_fun_calculateAvailableToRelease INLINECALLDICT
      NIP
      32651 PUSHINT
      OVER
      0 GTINT
      THROWANYIFNOT
      TUCK
      ADD
          NOW
      TRUE
      2 PUSHINT
          NEWC
      0 PUSHINT
      SWAP
      32 STU
          ENDC
      s10 PUSH
      s0 s4 XCHG
      s6 s6 s6 XCHG3
      $SendParameters$_constructor_to_bounce_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      SWAP
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    OVER
    3810183551 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s7 POP
      s5 s7 XCHG
      2 5 BLKSWAP
      $LiquidityLock$_fun_calculateAvailableToRelease INLINECALLDICT
          NEWC
      s7 s(-1) PUXC
      64 STU
      s6 s(-1) PUXC
      64 STU
      s5 s(-1) PUXC
      64 STU
      s4 PUSH
          STVARUINT16
      s3 PUSH
          STVARUINT16
      SWAP
          STVARUINT16
      s1 s(-1) PUXC
      64 STU
          ENDC
      __tact_context_get_sender INLINECALLDICT
      0 PUSHINT
      ROT
      66 PUSHINT
      SWAP
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    OVER
    2267712041 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s0 s7 XCHG
      $EmergencyReleaseMessage$_load_without_opcode INLINECALLDICT
      DROP
      NIP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s8 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      18859 PUSHINT
      s2 s8 PUSH2
      SUB
      s2 s(-1) PUXC
      LEQ
      THROWANYIFNOT
      s7 s7 XCPU
      ADD
      TRUE
      2 PUSHINT
          NEWC
      0 PUSHINT
      SWAP
      32 STU
          ENDC
      s8 PUSH
      s0 s4 XCHG
      s11 s11 s11 XCHG3
      $SendParameters$_constructor_to_bounce_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s5 s7 XCHG
      2 5 BLKSWAP
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    OVER
    153144301 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s5 POP
      s0 s6 XCHG
      $UpdateLiquidityPoolMessage$_load_without_opcode INLINECALLDICT
      NIP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s7 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      s5 s7 XCHG
      s0 s6 XCHG
      s3 s5 XCHG
      2 3 BLKSWAP
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    OVER
    4207437585 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s7 POP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s7 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      __tact_context_get_sender INLINECALLDICT
      FALSE
      0 PUSHINT
      130 PUSHINT
      $SendParameters$_constructor_to_bounce_value_mode INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s5 s7 XCHG
      2 5 BLKSWAP
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    OVER
    2490013878 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s0 s7 XCHG
      $Deploy$_load_without_opcode INLINECALLDICT
      NIP
      $DeployOk$_constructor_queryId INLINECALLDICT
      $DeployOk$_store_cell INLINECALLDICT
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $LiquidityLock$_fun_notify INLINECALLDICT
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    s9 POP
    0 EQINT
    s0 s8 XCHG
    33 LESSINT
    s1 s8 XCHG
    AND
    IFJMP:<{
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      ADD
      s5 s7 XCHG
      2 5 BLKSWAP
      $LiquidityLock$_contract_store INLINECALLDICT
    }>
    8 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot 
                    swap
                    
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop 
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop 
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop 
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll 
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop 
                    } 
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll 
                    { 
                        // If the dict is empty, throw 11
                        11 THROWARG 
                    } 
                    { 
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX 
                    } cond 
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
