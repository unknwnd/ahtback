// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `D:/cursor/a/ahtback/build/AnimalHelperToken_AnimalHelperToken.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $Deploy$_load_without_opcode
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $JettonData$_store
  DECLPROC $JettonData$_store_cell
  DECLPROC $GetWalletAddress$_load_without_opcode
  DECLPROC $UpdateContentMessage$_load_without_opcode
  DECLPROC $AnimalHelperToken$_store
  DECLPROC $AnimalHelperToken$_load
  DECLPROC $StateInit$_not_null
  DECLPROC $AnimalHelperToken$init$_load
  DECLPROC $AnimalHelperToken$_contract_init
  DECLPROC $AnimalHelperToken$_contract_load
  DECLPROC $AnimalHelperToken$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $StateInit$_constructor_code_data
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode_body
  DECLPROC $AnimalHelperToken$_fun_calculateWalletInit
  DECLPROC $AnimalHelperToken$_fun_calculate_user_wallet_address
  DECLPROC $AnimalHelperToken$_fun_mint
  DECLPROC $AnimalHelperToken$_fun_get_wallet_address
  DECLPROC $AnimalHelperToken$_fun_forward
  DECLPROC $AnimalHelperToken$_fun_notify
  DECLPROC $AnimalHelperToken$_fun_requireOwner
  DECLPROC $AnimalHelperToken$_fun_owner
  DECLPROC $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate
  DECLPROC $AnimalHelperToken$_fun_get_jetton_data
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  103289 DECLMETHOD %get_wallet_address
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $Deploy$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $JettonData$_store PROCINLINE:<{
    s5 s6 XCHG2
    257 PUSHINT
    STIX
    s1 s3 XCHG
    1 STI
    SWAP
    STSLICER
    STREF
    STREF
    257 PUSHINT
    STIX
  }>
  $JettonData$_store_cell PROCINLINE:<{
    NEWC
    6 -ROLL
    $JettonData$_store INLINECALLDICT
    ENDC
  }>
  $GetWalletAddress$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $UpdateContentMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDREF
    -ROT
  }>
  $AnimalHelperToken$_store PROCINLINE:<{
    s8 s9 XCHG2
    257 PUSHINT
    STIX
    s1 s6 XCHG
    257 PUSHINT
    STIX
    s1 s4 XCHG
    1 STI
    ROT
    STSLICER
    STREF
    SWAP
    NEWC
    STREF
    s1 s2 XCHG
    257 PUSHINT
    STIX
    ROT
    STSLICER
    ROT
    STSLICER
    ENDC
    SWAP
    STREF
  }>
  $AnimalHelperToken$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    1 LDI
    LDMSGADDR
    LDREF
    LDREF
    SWAP
    CTOS
    LDREF
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDMSGADDR
    DROP
    s4 s9 XCHG
    s4 s8 XCHG
    s4 s7 XCHG
    s4 s6 XCHG
    s4 s5 XCHG
  }>
  $StateInit$_not_null PROCINLINE:<{
        2 UNTUPLE
  }>
  $AnimalHelperToken$init$_load PROCINLINE:<{
    LDMSGADDR
    LDREF
    LDREF
    LDMSGADDR
    LDMSGADDR
    5 -ROLL
  }>
  $AnimalHelperToken$_contract_init PROCINLINE:<{
    1000000000000000000 PUSHINT
    FALSE
    s1 s0 s6 PUXC2
    s6 s5 s4 XCHG3
    s2 s3 XCHG
    0 PUSHINT
    s0 s1 s3 XCHG3
  }>
  $AnimalHelperToken$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $AnimalHelperToken$_load INLINECALLDICT
      1 9 BLKDROP2
    }>ELSE<{
      $AnimalHelperToken$init$_load INLINECALLDICT
      s0 s5 XCHG
      ENDS
      4 ROLL
      $AnimalHelperToken$_contract_init INLINECALLDICT
    }>
  }>
  $AnimalHelperToken$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    9 -ROLL
    $AnimalHelperToken$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $StateInit$_constructor_code_data PROCINLINE:<{
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $SendParameters$_constructor_to_bounce_value_mode_body PROCINLINE:<{
    s1 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  $AnimalHelperToken$_fun_calculateWalletInit PROCREF:<{
        NEWC
        MYADDR
        STSLICER
    SWAP
        STSLICER
        ENDC
    s4 s(-1) PUXC
    $StateInit$_constructor_code_data INLINECALLDICT
  }>
  $AnimalHelperToken$_fun_calculate_user_wallet_address PROCREF:<{
    $AnimalHelperToken$_fun_calculateWalletInit INLINECALLDICT
    $global_contractAddress INLINECALLDICT
  }>
  $AnimalHelperToken$_fun_mint PROCREF:<{
    10 2 BLKSWAP
    $AnimalHelperToken$_fun_calculate_user_wallet_address INLINECALLDICT
    TRUE
    50000000 PUSHINT
    1 PUSHINT
    FALSE
        NEWC
    395134233 PUSHINT
    SWAP
    32 STU
    s1 s15 XCHG
    64 STU
    s0 s15 XCHG2
        STVARUINT16
        MYADDR
        STSLICER
        MYADDR
        STSLICER
    0 PUSHINT
        STVARUINT16
    s1 s13 XCHG
        1 STI
        ENDC
    s4 s3 s0 XCHG3
    s12 s13 s0 XCHG3
    $SendParameters$_constructor_to_bounce_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    s6 s8 XCHG
    2 6 BLKSWAP
  }>
  $AnimalHelperToken$_fun_get_wallet_address PROCREF:<{
    $AnimalHelperToken$_fun_calculate_user_wallet_address INLINECALLDICT
  }>
  $AnimalHelperToken$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $AnimalHelperToken$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    FALSE
    PUSHNULL
    $AnimalHelperToken$_fun_forward INLINECALLDICT
  }>
  $AnimalHelperToken$_fun_requireOwner PROCREF:<{
    __tact_context_get_sender INLINECALLDICT
    s6 s(-1) PUXC
    SDEQ
    132 THROWIFNOT
  }>
  $AnimalHelperToken$_fun_owner PROCREF:<{
    s5 PUSH
  }>
  $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate PROCINLINE:<{
  }>
  $AnimalHelperToken$_fun_get_jetton_data PROCREF:<{
    s8 s6 s5 PUSH3
    s7 s6 s5 PUSH3
    $JettonData$_constructor_totalSupply_mintable_owner_content_walletCode_tokenRate INLINECALLDICT
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  %get_wallet_address PROC:<{
    $AnimalHelperToken$_contract_load INLINECALLDICT
    9 ROLL
    $AnimalHelperToken$_fun_get_wallet_address INLINECALLDICT
    9 1 BLKDROP2
  }>
  %owner PROC:<{
    $AnimalHelperToken$_contract_load INLINECALLDICT
    $AnimalHelperToken$_fun_owner INLINECALLDICT
    9 1 BLKDROP2
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $AnimalHelperToken$_contract_load INLINECALLDICT
    s0 s10 XCHG
    IFJMP:<{
      10 BLKDROP
    }>
    s8 PUSH
    SBITS
    31 GTINT
    IF:<{
      s0 s8 XCHG
      32 LDU
      OVER
      1419921888 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        $UpdateContentMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s1 s3 s9 XCHG3
        $AnimalHelperToken$_fun_requireOwner INLINECALLDICT
        s4 POP
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        3 ROLL
        $AnimalHelperToken$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2490013878 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        $Deploy$_load_without_opcode INLINECALLDICT
        NIP
        $DeployOk$_constructor_queryId INLINECALLDICT
        $DeployOk$_store_cell INLINECALLDICT
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        $AnimalHelperToken$_fun_notify INLINECALLDICT
        $AnimalHelperToken$_contract_store INLINECALLDICT
        RETALT
      }>
      SWAP
      3316846856 PUSHINT
      EQUAL
      IFJMP:<{
        $GetWalletAddress$_load_without_opcode INLINECALLDICT
        NIP
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        $AnimalHelperToken$_fun_calculate_user_wallet_address INLINECALLDICT
        __tact_context_get_sender INLINECALLDICT
        0 PUSHINT
        66 PUSHINT
            NEWC
        s0 s4 XCHG2
            STSLICER
            ENDC
        s1 s3 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        $AnimalHelperToken$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 s8 XCHG
    }>
    s0 s8 XCHG
    HASHSU
    DUP
    32944328965206919230569162742750468426101512911312516532777156695547264187709 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s6 s8 XCHG
      2 6 BLKSWAP
      $AnimalHelperToken$_fun_requireOwner INLINECALLDICT
      50322 PUSHINT
      s9 s8 PUSH2
      EQUAL
      THROWANYIFNOT
      s7 PUSH
      10 PUSHINT
      DIV
      s8 s0 PUSH2
      SUB
      s9 s10 XCHG
      s8 s10 XCHG
      s7 s10 XCHG
      s3 PUSH
      s7 s11 XCHG
      s6 s11 XCHG
      s5 s11 XCHG
      s4 s11 XCHG
      s3 s11 s3 XCHG3
      0 PUSHINT
      $AnimalHelperToken$_fun_mint INLINECALLDICT
      s8 s9 XCHG
      s7 s8 XCHG
      s6 s7 XCHG
      s5 s6 XCHG
      s4 s5 XCHG
      s3 s4 XCHG
      s1 s3 s0 XCHG3
      s0 s1 PUXC
      1 PUSHINT
      $AnimalHelperToken$_fun_mint INLINECALLDICT
      $AnimalHelperToken$_contract_store INLINECALLDICT
    }>
    70137491726614092465948351300540892763156447516118853219218934555044400748077 PUSHINT
    EQUAL
    IFJMP:<{
      s6 s8 XCHG
      2 6 BLKSWAP
      $AnimalHelperToken$_fun_get_jetton_data INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
      s3 s6 XCHG
      s5 s4 s0 XCHG3
      0 PUSHINT
      s7 s6 XCHG2
      66 PUSHINT
      s0 s6 XCHG
      $JettonData$_store_cell INLINECALLDICT
          NEWC
          STREF
          ENDC
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $AnimalHelperToken$_contract_store INLINECALLDICT
    }>
    9 BLKDROP
    130 THROW
  }>
}END>c
