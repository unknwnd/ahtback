// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `C:/aht/charity-token/build/AnimalHelperNFT_AnimalHelperNFT.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $Deploy$_load_without_opcode
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $GetCollectionDataMessage$_load_without_opcode
  DECLPROC $NFTAddressByIndexMessage$_load_without_opcode
  DECLPROC $GetNFTContentMessage$_load_without_opcode
  DECLPROC $MintNFTMessage$_load_without_opcode
  DECLPROC $UpdateTokenContractMessage$_load_without_opcode
  DECLPROC $UpdateContentMessage$_load_without_opcode
  DECLPROC $EmergencyWithdrawMessage$_load_without_opcode
  DECLPROC $CollectionData$_store
  DECLPROC $CollectionData$_store_cell
  DECLPROC $AnimalHelperNFT$_store
  DECLPROC $AnimalHelperNFT$_load
  DECLPROC $StateInit$_not_null
  DECLPROC $Context$_get_value
  DECLPROC $AnimalHelperNFT$init$_load
  DECLPROC $AnimalHelperNFT$_contract_init
  DECLPROC $AnimalHelperNFT$_contract_load
  DECLPROC $AnimalHelperNFT$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $SendParameters$_constructor_to_value_mode_code_data_body
  DECLPROC $StateInit$_constructor_code_data
  DECLPROC $AnimalHelperNFT$_fun_getNFTStateInit
  DECLPROC $AnimalHelperNFT$_fun_mint
  DECLPROC $AnimalHelperNFT$_fun_getNFTAddressByIndex
  DECLPROC $AnimalHelperNFT$_fun_getNFTContent
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $AnimalHelperNFT$_fun_forward
  DECLPROC $AnimalHelperNFT$_fun_notify
  DECLPROC $AnimalHelperNFT$_fun_owner
  DECLPROC $CollectionData$_constructor_nextIndex_owner_content_nftItemCode
  DECLPROC $AnimalHelperNFT$_fun_getCollectionData
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $Deploy$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $GetCollectionDataMessage$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $NFTAddressByIndexMessage$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $GetNFTContentMessage$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $MintNFTMessage$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    32 LDU
    -ROT
  }>
  $UpdateTokenContractMessage$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $UpdateContentMessage$_load_without_opcode PROCINLINE:<{
    LDREF
    SWAP
  }>
  $EmergencyWithdrawMessage$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $CollectionData$_store PROCINLINE:<{
    s3 s4 XCHG2
    257 PUSHINT
    STIX
    SWAP
    STSLICER
    STREF
    STREF
  }>
  $CollectionData$_store_cell PROCINLINE:<{
    NEWC
    4 -ROLL
    $CollectionData$_store INLINECALLDICT
    ENDC
  }>
  $AnimalHelperNFT$_store PROCINLINE:<{
    s5 s4 XCHG2
    STSLICER
    s1 s2 XCHG
    257 PUSHINT
    STIX
    STREF
    s1 s2 XCHG
    STREF
    SWAP
    STSLICER
  }>
  $AnimalHelperNFT$_load PROCINLINE:<{
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    LDREF
    LDMSGADDR
    5 -ROLL
  }>
  $StateInit$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        2 UNTUPLE
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $AnimalHelperNFT$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDREF
    LDREF
    4 -ROLL
  }>
  $AnimalHelperNFT$_contract_init PROCINLINE:<{
    0 PUSHINT
    s0 s3 XCHG
  }>
  $AnimalHelperNFT$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $AnimalHelperNFT$_load INLINECALLDICT
      1 5 BLKDROP2
    }>ELSE<{
      $AnimalHelperNFT$init$_load INLINECALLDICT
      s0 s4 XCHG
      ENDS
      3 ROLL
      $AnimalHelperNFT$_contract_init INLINECALLDICT
    }>
  }>
  $AnimalHelperNFT$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    5 -ROLL
    $AnimalHelperNFT$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $SendParameters$_constructor_to_value_mode_code_data_body PROCINLINE:<{
    s3 s5 XCHG
    s1 s4 s4 XCHG3
    s0 s3 XCHG
    TRUE
  }>
  $StateInit$_constructor_code_data PROCINLINE:<{
  }>
  $AnimalHelperNFT$_fun_getNFTStateInit PROCREF:<{
        NEWC
        MYADDR
        STSLICER
    64 STU
        ENDC
    s2 s(-1) PUXC
    $StateInit$_constructor_code_data INLINECALLDICT
  }>
  $AnimalHelperNFT$_fun_mint PROCREF:<{
    s4 PUSH
    INC
    s5 s6 XCHG
    4 -ROLL
    s0 s6 XCHG
    $AnimalHelperNFT$_fun_getNFTStateInit INLINECALLDICT
    2DUP
    $global_contractAddress INLINECALLDICT
    30000000 PUSHINT
    2 PUSHINT
        NEWC
    1 PUSHINT
    SWAP
    32 STU
    s0 s11 XCHG2
        STSLICER
        ENDC
    s5 s4 s0 XCHG3
    s3 s10 XCHG
    s1 s10 s0 XCHG3
    $SendParameters$_constructor_to_value_mode_code_data_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    4 ROLL
  }>
  $AnimalHelperNFT$_fun_getNFTAddressByIndex PROCREF:<{
    $AnimalHelperNFT$_fun_getNFTStateInit INLINECALLDICT
    $global_contractAddress INLINECALLDICT
  }>
  $AnimalHelperNFT$_fun_getNFTContent PROCREF:<{
        NEWC
    s4 s(-1) PUXC
        STREF
    64 STU
        ENDC
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $AnimalHelperNFT$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $AnimalHelperNFT$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    FALSE
    PUSHNULL
    $AnimalHelperNFT$_fun_forward INLINECALLDICT
  }>
  $AnimalHelperNFT$_fun_owner PROCREF:<{
    s4 PUSH
  }>
  $CollectionData$_constructor_nextIndex_owner_content_nftItemCode PROCINLINE:<{
  }>
  $AnimalHelperNFT$_fun_getCollectionData PROCREF:<{
    s3 s4 s2 PUSH3
    s4 PUSH
    $CollectionData$_constructor_nextIndex_owner_content_nftItemCode INLINECALLDICT
  }>
  $SendParameters$_constructor_to_bounce_value_mode PROCINLINE:<{
    s0 s3 XCHG
    PUSHNULL
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  %owner PROC:<{
    $AnimalHelperNFT$_contract_load INLINECALLDICT
    $AnimalHelperNFT$_fun_owner INLINECALLDICT
    5 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $AnimalHelperNFT$_contract_load INLINECALLDICT
    s0 s6 XCHG
    IFJMP:<{
      6 BLKDROP
    }>
    s0 s4 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    3407120329 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $MintNFTMessage$_load_without_opcode INLINECALLDICT
      s2 POP
      42435 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s8 s(-1) PUXC
      SDEQ
      IF:<{
        TRUE
      }>ELSE<{
        __tact_context_get_sender INLINECALLDICT
        s6 s(-1) PUXC
        SDEQ
      }>
      THROWANYIFNOT
      40000000 PUSHINT
      s2 PUSH
      MUL
      41925 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      ROT
      GEQ
      THROWANYIFNOT
      SWAP
      REPEAT:<{
        s3 s4 XCHG
        s1 s3 s5 XCHG3
        s5 PUSH
        $AnimalHelperNFT$_fun_mint INLINECALLDICT
        s4 s5 XCHG2
        s3 s3 s0 XCHG3
      }>
      DROP
      s0 s3 s4 XCHG3
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    OVER
    2730135765 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      s5 POP
      s0 s4 XCHG
      $UpdateTokenContractMessage$_load_without_opcode INLINECALLDICT
      NIP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s4 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      s4 s3 s0 XCHG3
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    OVER
    616724939 PUSHINT
    EQUAL
    IFJMP:<{
      2 1 BLKDROP2
      $UpdateContentMessage$_load_without_opcode INLINECALLDICT
      NIP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s4 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      s0 s3 s4 XCHG3
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    OVER
    4207437585 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s4 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      __tact_context_get_sender INLINECALLDICT
      FALSE
      0 PUSHINT
      130 PUSHINT
      $SendParameters$_constructor_to_bounce_value_mode INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s3 s4 XCHG3
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    OVER
    2490013878 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $Deploy$_load_without_opcode INLINECALLDICT
      NIP
      $DeployOk$_constructor_queryId INLINECALLDICT
      $DeployOk$_store_cell INLINECALLDICT
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $AnimalHelperNFT$_fun_notify INLINECALLDICT
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    OVER
    3384592759 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s0 s3 s4 XCHG3
      $AnimalHelperNFT$_fun_getCollectionData INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
      s1 s4 XCHG
      0 PUSHINT
      s4 s3 XCHG2
      66 PUSHINT
      s0 s6 XCHG
      $CollectionData$_store_cell INLINECALLDICT
          NEWC
          STREF
          ENDC
      s1 s3 s0 XCHG3
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    OVER
    3046504829 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $NFTAddressByIndexMessage$_load_without_opcode INLINECALLDICT
      NIP
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $AnimalHelperNFT$_fun_getNFTAddressByIndex INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
      0 PUSHINT
      66 PUSHINT
          NEWC
      s0 s4 XCHG2
          STSLICER
          ENDC
      s1 s3 s0 XCHG3
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    SWAP
    2698891704 PUSHINT
    EQUAL
    IFJMP:<{
      $GetNFTContentMessage$_load_without_opcode INLINECALLDICT
      NIP
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      $AnimalHelperNFT$_fun_getNFTContent INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
      0 PUSHINT
      66 PUSHINT
          NEWC
      s1 s4 XCHG
          STREF
          ENDC
      s1 s3 s0 XCHG3
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $AnimalHelperNFT$_contract_store INLINECALLDICT
    }>
    6 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot 
                    swap
                    
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop 
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop 
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop 
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll 
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop 
                    } 
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll 
                    { 
                        // If the dict is empty, throw 11
                        11 THROWARG 
                    } 
                    { 
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX 
                    } cond 
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
