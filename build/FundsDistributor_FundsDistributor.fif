// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `D:/cursor/a/ahtback/build/FundsDistributor_FundsDistributor.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_load_address_opt
  DECLPROC __tact_store_address_opt
  DECLPROC __tact_crc16
  DECLPROC __tact_base64_encode
  DECLPROC __tact_address_to_user_friendly
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_slice_neq
  DECLPROC __tact_dict_get_int_cell
  DECLPROC __tact_dict_set_int_cell
  DECLPROC $Deploy$_load_without_opcode
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $UpdateLiquidityPoolMessage$_load_without_opcode
  DECLPROC $UpdateAnimalHelperPoolMessage$_load_without_opcode
  DECLPROC $UpdateProjectPoolMessage$_load_without_opcode
  DECLPROC $UpdateInvestorsCreatorsPoolMessage$_load_without_opcode
  DECLPROC $UpdateLiquidityLockMessage$_load_without_opcode
  DECLPROC $UpdateDistributionRatioMessage$_load_without_opcode
  DECLPROC $UpdateLockRatioMessage$_load_without_opcode
  DECLPROC $EmergencyWithdrawMessage$_load_without_opcode
  DECLPROC $AdminConfig$_store
  DECLPROC $AdminConfig$_load
  DECLPROC $TransactionSummary$_store
  DECLPROC $TransactionSummary$_load
  DECLPROC $FundsDistributor$_store
  DECLPROC $FundsDistributor$_load
  DECLPROC $StateInit$_not_null
  DECLPROC $Context$_get_value
  DECLPROC $Context$_get_raw
  DECLPROC $FundsDistributor$init$_load
  DECLPROC $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals
  DECLPROC $TransactionSummary$_constructor_successCount_failCount_totalSent
  DECLPROC $FundsDistributor$_contract_init
  DECLPROC $FundsDistributor$_contract_load
  DECLPROC $FundsDistributor$_contract_store
  DECLPROC $FundsDistributor$_fun_requireAdmin
  DECLPROC $FundsDistributor$_fun_validatePoolAddresses
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode_body
  DECLPROC $FundsDistributor$_fun_sendFunds
  DECLPROC $FundsDistributor$_fun_distributeAmount
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $FundsDistributor$_fun_forward
  DECLPROC $FundsDistributor$_fun_notify
  DECLPROC $FundsDistributor$_fun_owner
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  83229 DECLMETHOD %owner
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_load_address_opt PROCINLINE:<{
    DUP
    2 PLDU
    0 NEQINT
    IF:<{
      LDMSGADDR
      SWAP
    }>ELSE<{
      2 PUSHINT
      SDSKIPFIRST
      PUSHNULL
    }>
  }>
  __tact_store_address_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      0 PUSHINT
      SWAP
      2 STU
    }>ELSE<{
      STSLICER
    }>
  }>
  __tact_crc16 PROCREF:<{
    NEWC
    SWAP
    STSLICER
    x{0000} PUSHSLICE
    STSLICER
    ENDC
    CTOS
    0 PUSHINT
    WHILE:<{
      OVER
      SDEMPTY
      NOT
    }>DO<{
      SWAP
      8 LDU
      7 PUSHPOW2
      WHILE:<{
        DUP
        0 GTINT
      }>DO<{
        s0 s3 XCHG
        1 LSHIFT#
        s2 s3 PUSH2
        AND
        IF:<{
          INC
        }>
        s0 s3 XCHG
        1 RSHIFT#
        s3 PUSH
        16 PUSHPOW2DEC
        GREATER
        IF:<{
          s0 s3 XCHG
          16 PUSHPOW2DEC
          AND
          4129 PUSHINT
          XOR
          s0 s3 XCHG
        }>
      }>
      DROP
      NIP
      SWAP
    }>
    NIP
    8 PUSHPOW2
    DIVMOD
    SWAP
    NEWC
    8 STU
    8 STU
    ENDC
    CTOS
  }>
  __tact_base64_encode PROCREF:<{
    x{4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F} PUSHSLICE
    NEWC
    WHILE:<{
      s2 PUSH
      SBITS
      23 GTINT
    }>DO<{
      s0 s2 XCHG
      8 LDU
      8 LDU
      8 LDU
      s0 s3 XCHG
      16 LSHIFT#
      s0 s2 XCHG
      8 LSHIFT#
      s1 s2 XCHG
      OR
      SWAP
      OR
      DUP
      18 RSHIFT#
      63 PUSHINT
      AND
      3 LSHIFT#
      s3 s(-1) PUXC
      8 PUSHINT
          SDSUBSTR
      s1 s4 XCHG
      STSLICER
      s3 PUSH
      12 RSHIFT#
      63 PUSHINT
      AND
      3 LSHIFT#
      s3 s(-1) PUXC
      8 PUSHINT
          SDSUBSTR
      STSLICER
      s3 PUSH
      6 RSHIFT#
      63 PUSHINT
      AND
      3 LSHIFT#
      s3 s(-1) PUXC
      8 PUSHINT
          SDSUBSTR
      STSLICER
      s0 s3 XCHG
      63 PUSHINT
      AND
      3 LSHIFT#
      s2 s(-1) PUXC
      8 PUSHINT
          SDSUBSTR
      s1 s3 XCHG
      STSLICER
    }>
    2 1 BLKDROP2
    ENDC
    CTOS
  }>
  __tact_address_to_user_friendly PROCREF:<{
    REWRITESTDADDR
    NEWC
    x{11} PUSHSLICE
    STSLICER
    s0 s2 XCHG
    8 PUSHPOW2
    ADD
    8 MODPOW2#
    ROT
    8 STU
    256 STU
    ENDC
    CTOS
    DUP
    __tact_crc16 INLINECALLDICT
    NEWC
    ROT
    STSLICER
    SWAP
    STSLICER
    ENDC
    CTOS
    __tact_base64_encode INLINECALLDICT
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_slice_neq PROCINLINE:<{
    SWAP
    HASHSU
    SWAP
    HASHSU
    NEQ
  }>
  __tact_dict_get_int_cell PROCINLINE:<{
    -ROT
    DICTIGETREF
    NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_cell PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      s1 s3 s3 XCHG3
      DICTISETREF
    }>
  }>
  $Deploy$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $UpdateLiquidityPoolMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $UpdateAnimalHelperPoolMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $UpdateProjectPoolMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $UpdateInvestorsCreatorsPoolMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $UpdateLiquidityLockMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $UpdateDistributionRatioMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    DROP
    s2 s5 XCHG
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $UpdateLockRatioMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    -ROT
  }>
  $EmergencyWithdrawMessage$_load_without_opcode PROCINLINE:<{
    257 PUSHINT
    LDIX
    SWAP
  }>
  $AdminConfig$_store PROCINLINE:<{
    s5 s4 XCHG2
    __tact_store_address_opt INLINECALLDICT
    ROT
    STSLICER
    257 PUSHINT
    STIX
    s0 s2 XCHG
    NEWC
    257 PUSHINT
    STIX
    STDICT
    ENDC
    SWAP
    STREF
  }>
  $AdminConfig$_load PROCINLINE:<{
    __tact_load_address_opt INLINECALLDICT
    SWAP
    LDMSGADDR
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    257 PUSHINT
    LDIX
    LDDICT
    DROP
    s2 s5 XCHG
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $TransactionSummary$_store PROCINLINE:<{
    s2 s3 XCHG2
    257 PUSHINT
    STIX
    257 PUSHINT
    STIX
    257 PUSHINT
    STIX
  }>
  $TransactionSummary$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    3 -ROLL
  }>
  $FundsDistributor$_store PROCINLINE:<{
    s1 20 s() XCHG
    s0 19 s() XCHG
    STSLICER
    SWAP
    s0 17 s() XCHG
    STSLICER
    s0 s15 XCHG2
    STSLICER
    NEWC
    s0 s14 XCHG2
    STSLICER
    s0 s12 XCHG2
    STSLICER
    s0 s10 XCHG2
    STSLICER
    s0 s8 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s7 XCHG
    257 PUSHINT
    STIX
    s1 s5 XCHG
    257 PUSHINT
    STIX
    s0 s3 XCHG
    NEWC
    257 PUSHINT
    STIX
    s1 s2 XCHG
    257 PUSHINT
    STIX
    257 PUSHINT
    STIX
    NEWC
    s0 s5 XCHG
    s3 s4 XCHG
    s6 s7 s9 XCHG3
    $AdminConfig$_store INLINECALLDICT
    NEWC
    s6 s1 s3 XCHG3
    s8 s7 XCHG2
    $TransactionSummary$_store INLINECALLDICT
    ENDC
    s0 s5 XCHG2
    STREF
    ENDC
    s0 s3 XCHG2
    STREF
    ENDC
    SWAP
    STREF
    ENDC
    SWAP
    STREF
    ENDC
    SWAP
    STREF
  }>
  $FundsDistributor$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    LDREF
    DROP
    CTOS
    $AdminConfig$_load INLINECALLDICT
    s0 s5 XCHG
    LDREF
    DROP
    CTOS
    $TransactionSummary$_load INLINECALLDICT
    s3 POP
    17 s() 20 s() XCHG
    17 s() 19 s() XCHG
    17 s() 18 s() XCHG
    s6 s7 XCHG
    s5 s6 XCHG
    s4 s5 XCHG
    s3 s4 XCHG
    ROT
  }>
  $StateInit$_not_null PROCINLINE:<{
        2 UNTUPLE
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Context$_get_raw PROCINLINE:<{
    3 1 BLKDROP2
  }>
  $FundsDistributor$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    LDMSGADDR
    LDMSGADDR
    LDMSGADDR
    DROP
    s3 s6 XCHG
    s3 s5 XCHG
    s3 s4 XCHG
  }>
  $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals PROCINLINE:<{
  }>
  $TransactionSummary$_constructor_successCount_failCount_totalSent PROCINLINE:<{
  }>
  $FundsDistributor$_contract_init PROCINLINE:<{
    65 PUSHINT
    20 PUSHINT
    10 PUSHINT
    5 PUSHINT
    70 PUSHINT
    10000000 PUSHINT
    s11 PUSH
    PUSHNULL
    0 PUSHINT
    s2 s0 s0 XC2PU
    s2 s15 XCHG
    PUSHNULL
    $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals INLINECALLDICT
    0 PUSHINT
    s0 s0 PUSH2
    $TransactionSummary$_constructor_successCount_failCount_totalSent INLINECALLDICT
  }>
  $FundsDistributor$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $FundsDistributor$_load INLINECALLDICT
      20 s() POP
      18 s() 19 s() XCHG
      17 s() 18 s() XCHG
      16 s() 17 s() XCHG
      s15 16 s() XCHG
      15 ROLL
    }>ELSE<{
      $FundsDistributor$init$_load INLINECALLDICT
      s0 s6 XCHG
      ENDS
      5 ROLL
      $FundsDistributor$_contract_init INLINECALLDICT
    }>
  }>
  $FundsDistributor$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    s0 20 s() XCHG
    s0 19 s() XCHG
    s0 18 s() XCHG
    s0 17 s() XCHG
    s0 16 s() XCHG
    15 -ROLL
    $FundsDistributor$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $FundsDistributor$_fun_requireAdmin PROCREF:<{
    31651 PUSHINT
        NOW
    s7 PUSH
    GREATER
    THROWANYIFNOT
    __tact_context_get_sender INLINECALLDICT
    20 s() PUSH
    SWAP
    SDEQ
    s8 PUSH
    ISNULL
    NOT
    IF:<{
      IF:<{
        TRUE
      }>ELSE<{
        __tact_context_get_sender INLINECALLDICT
        s8 s(-1) PUXC
        SDEQ
      }>
    }>
    42435 PUSHINT
    SWAP
    THROWANYIFNOT
  }>
  $FundsDistributor$_fun_validatePoolAddresses PROCREF:<{
    36917 PUSHINT
        B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
    20 s() PUSH
    __tact_address_to_user_friendly INLINECALLDICT
    __tact_slice_neq INLINECALLDICT
    THROWANYIFNOT
    49912 PUSHINT
        B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
    19 s() PUSH
    __tact_address_to_user_friendly INLINECALLDICT
    __tact_slice_neq INLINECALLDICT
    THROWANYIFNOT
    29638 PUSHINT
        B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
    18 s() PUSH
    __tact_address_to_user_friendly INLINECALLDICT
    __tact_slice_neq INLINECALLDICT
    THROWANYIFNOT
    7826 PUSHINT
        B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
    17 s() PUSH
    __tact_address_to_user_friendly INLINECALLDICT
    __tact_slice_neq INLINECALLDICT
    THROWANYIFNOT
    4989 PUSHINT
        B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
    16 s() PUSH
    __tact_address_to_user_friendly INLINECALLDICT
    __tact_slice_neq INLINECALLDICT
    THROWANYIFNOT
  }>
  $SendParameters$_constructor_to_bounce_value_mode_body PROCINLINE:<{
    s1 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  $FundsDistributor$_fun_sendFunds PROCREF:<{
    s1 s11 PUSH2
    LESS
    IFJMP:<{
      3 BLKDROP
      FALSE
    }>
    TRUE
    1 PUSHINT
        NEWC
    s1 s3 XCHG
    64 STU
        ENDC
    s3 s3 s0 XCHG3
    $SendParameters$_constructor_to_bounce_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    TRUE
  }>
  $FundsDistributor$_fun_distributeAmount PROCREF:<{
    33719 PUSHINT
    s2 s11 PUSH2
    GEQ
    THROWANYIFNOT
    s1 s15 PUSH2
    MUL
    100 PUSHINT
    DIV
    s2 s15 PUSH2
    MUL
    100 PUSHINT
    DIV
    s3 s15 PUSH2
    MUL
    100 PUSHINT
    DIV
    s4 s15 PUSH2
    MUL
    100 PUSHINT
    DIV
    2OVER
    ADD
    s2 PUSH
    ADD
    OVER
    ADD
    13131 PUSHINT
    s0 s7 XCHG
    LEQ
    s1 s6 XCHG
    THROWANYIFNOT
    0 PUSHINT
    s0 s3 s14 PUSH3
    GEQ
    IF:<{
      s4 PUSH
      17 s() PUSH
      MUL
      100 PUSHINT
      DIV
      s5 s5 XCPU
      SUB
      DUP
      17 s() PUSH
      GEQ
      IF:<{
        19 s() 27 s() XCHG
        26 s() PUSH
        s0 19 s() XCHG
        18 s() 26 s() XCHG
        17 s() 25 s() XCHG
        16 s() 24 s() XCHG
        s15 23 s() XCHG
        s14 22 s() XCHG
        s13 21 s() XCHG
        s12 28 s() XCHG
        s0 s11 XCHG
        s10 26 s() XCHG
        s9 25 s() XCHG
        s8 24 s() XCHG
        s7 23 s() XCHG
        s6 22 s() XCHG
        s5 21 s() XCHG
        s4 28 s() XCHG
        s0 s3 XCHG
        s2 26 s() XCHG
        s1 25 s() XCHG
        s0 27 s() XCHG
        25 s() PUSH
        24 s() PUSH
        $FundsDistributor$_fun_sendFunds INLINECALLDICT
        IF:<{
          25 s() POP
          1 PUSHINT
          26 s() POP
          s0 23 s() XCHG
          s0 24 s() XCHG
          s0 23 s() XCHG
        }>ELSE<{
          24 s() POP
        }>
        18 s() 26 s() XCHG
        17 s() 25 s() XCHG
        16 s() 24 s() XCHG
        s15 23 s() XCHG
        s14 22 s() XCHG
        s13 21 s() XCHG
        s12 20 s() XCHG
        s11 19 s() XCHG
        s10 18 s() XCHG
        s9 17 s() XCHG
        s8 16 s() XCHG
        8 8 BLKSWAP
      }>ELSE<{
        DROP
      }>
      s4 s15 PUSH2
      GEQ
      IF:<{
        19 s() 26 s() XCHG
        18 s() 25 s() XCHG
        24 s() PUSH
        s0 18 s() XCHG
        17 s() 24 s() XCHG
        16 s() 23 s() XCHG
        s15 22 s() XCHG
        s14 21 s() XCHG
        s13 27 s() XCHG
        s12 26 s() XCHG
        s0 s11 XCHG
        s10 24 s() XCHG
        s9 23 s() XCHG
        s8 22 s() XCHG
        s7 21 s() XCHG
        s6 27 s() XCHG
        s5 26 s() XCHG
        s0 s4 XCHG
        s3 24 s() XCHG
        s2 23 s() XCHG
        s1 22 s() XCHG
        s0 25 s() XCHG
        26 s() PUSH
        28 s() PUSH
        $FundsDistributor$_fun_sendFunds INLINECALLDICT
        IF:<{
          s0 22 s() XCHG
          INC
          s1 21 s() XCHG
          s0 25 s() XCHG
          ADD
          21 s() 24 s() XCHG
          s0 20 s() XCHG
        }>ELSE<{
          25 s() POP
        }>
        18 s() 25 s() XCHG
        17 s() 24 s() XCHG
        16 s() 23 s() XCHG
        s15 22 s() XCHG
        s14 21 s() XCHG
        s13 20 s() XCHG
        s12 19 s() XCHG
        s11 18 s() XCHG
        s10 17 s() XCHG
        s9 16 s() XCHG
        s8 s15 XCHG
        s7 s14 XCHG
        7 7 BLKSWAP
        s3 s6 XCHG
      }>ELSE<{
        s4 POP
      }>
    }>ELSE<{
      s4 POP
    }>
    s2 s14 PUSH2
    GEQ
    IF:<{
      19 s() 25 s() XCHG
      18 s() 24 s() XCHG
      17 s() 23 s() XCHG
      22 s() PUSH
      s0 17 s() XCHG
      16 s() 22 s() XCHG
      s15 21 s() XCHG
      s14 26 s() XCHG
      s13 25 s() XCHG
      s12 24 s() XCHG
      s0 s11 XCHG
      s10 22 s() XCHG
      s9 21 s() XCHG
      s8 26 s() XCHG
      s7 25 s() XCHG
      s6 24 s() XCHG
      s0 s5 XCHG
      s4 22 s() XCHG
      s3 21 s() XCHG
      s2 26 s() XCHG
      s1 25 s() XCHG
      s0 23 s() XCHG
      21 s() PUSH
      24 s() PUSH
      $FundsDistributor$_fun_sendFunds INLINECALLDICT
      IF:<{
        s0 24 s() XCHG
        INC
        s1 21 s() XCHG
        s0 20 s() XCHG
        ADD
        19 s() 23 s() XCHG
        s0 20 s() XCHG
      }>ELSE<{
        20 s() POP
      }>
      18 s() 24 s() XCHG
      17 s() 23 s() XCHG
      16 s() 22 s() XCHG
      s15 21 s() XCHG
      s14 20 s() XCHG
      s13 19 s() XCHG
      s12 18 s() XCHG
      s11 17 s() XCHG
      s10 16 s() XCHG
      s9 s15 XCHG
      s8 s14 XCHG
      s7 s13 XCHG
      s6 s12 XCHG
      6 6 BLKSWAP
      s1 s5 XCHG
    }>ELSE<{
      s2 POP
    }>
    s0 s13 PUSH2
    GEQ
    IF:<{
      19 s() 24 s() XCHG
      18 s() 23 s() XCHG
      17 s() 22 s() XCHG
      16 s() 21 s() XCHG
      20 s() PUSH
      s0 16 s() XCHG
      s15 25 s() XCHG
      s14 24 s() XCHG
      s13 23 s() XCHG
      s12 22 s() XCHG
      s0 s11 XCHG
      s10 25 s() XCHG
      s9 24 s() XCHG
      s8 23 s() XCHG
      s7 22 s() XCHG
      s0 s6 XCHG
      s5 25 s() XCHG
      s4 24 s() XCHG
      s3 23 s() XCHG
      s2 22 s() XCHG
      SWAP
      s0 21 s() XCHG
      21 s() PUSH
      25 s() PUSH
      $FundsDistributor$_fun_sendFunds INLINECALLDICT
      IF:<{
        s0 21 s() XCHG
        INC
        s1 22 s() XCHG
        s0 20 s() XCHG
        ADD
        s0 21 s() XCHG
        19 s() 20 s() XCHG
      }>ELSE<{
        20 s() POP
      }>
      18 s() 23 s() XCHG
      17 s() 22 s() XCHG
      16 s() 21 s() XCHG
      s15 20 s() XCHG
      s14 19 s() XCHG
      s13 18 s() XCHG
      s12 17 s() XCHG
      s11 16 s() XCHG
      s10 s15 XCHG
      5 10 BLKSWAP
    }>ELSE<{
      DROP
    }>
    s3 s12 PUSH2
    GEQ
    IF:<{
      20 s() 23 s() XCHG
      19 s() 22 s() XCHG
      18 s() 21 s() XCHG
      17 s() 23 s() XCHG
      16 s() 22 s() XCHG
      21 s() PUSH
      s0 16 s() XCHG
      s15 24 s() XCHG
      s14 23 s() XCHG
      s0 s13 XCHG
      s12 24 s() XCHG
      s11 23 s() XCHG
      s0 s10 XCHG
      s9 24 s() XCHG
      s8 23 s() XCHG
      s0 s7 XCHG
      s6 24 s() XCHG
      s5 23 s() XCHG
      s0 s4 XCHG
      s3 24 s() XCHG
      s2 23 s() XCHG
      s1 22 s() XCHG
      DUP
      s0 25 s() XCHG
      $FundsDistributor$_fun_sendFunds INLINECALLDICT
      IF:<{
        s0 20 s() XCHG
        INC
        s1 21 s() XCHG
        s0 22 s() XCHG
        ADD
        19 s() 21 s() XCHG
        s0 20 s() XCHG
      }>ELSE<{
        22 s() POP
      }>
      18 s() 21 s() XCHG
      17 s() 20 s() XCHG
      16 s() 19 s() XCHG
      s15 18 s() XCHG
      s14 17 s() XCHG
      s13 16 s() XCHG
      3 13 BLKSWAP
    }>ELSE<{
      2 2 BLKDROP2
    }>
    s4 s4 XCPU
    ADD
    5 PUSHINT
    s0 s5 XCHG2
    SUB
    s1 s3 XCHG
    ADD
    s0 s2 XCHG
    ADD
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $FundsDistributor$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        AND
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $FundsDistributor$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    FALSE
    PUSHNULL
    $FundsDistributor$_fun_forward INLINECALLDICT
  }>
  $FundsDistributor$_fun_owner PROCREF:<{
    19 s() PUSH
  }>
  $SendParameters$_constructor_to_bounce_value_mode PROCINLINE:<{
    s0 s3 XCHG
    PUSHNULL
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  %owner PROC:<{
    $FundsDistributor$_contract_load INLINECALLDICT
    $FundsDistributor$_fun_owner INLINECALLDICT
    16 s() POP
    15 BLKDROP
    4 1 BLKDROP2
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $FundsDistributor$_contract_load INLINECALLDICT
    s0 21 s() XCHG
    IFJMP:<{
      15 BLKDROP
      6 BLKDROP
    }>
    0 PUSHINT
    20 s() PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 20 s() XCHG
      32 LDU
      OVER
      3855890798 PUSHINT
      EQUAL
      IFJMP:<{
        2DROP
        19 s() POP
        17 s() 19 s() XCHG
        16 s() 18 s() XCHG
        s15 17 s() XCHG
        s14 16 s() XCHG
        s13 s15 XCHG
        2 13 BLKSWAP
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        __tact_context_get_sender INLINECALLDICT
        FALSE
        0 PUSHINT
        129 PUSHINT
        $SendParameters$_constructor_to_bounce_value_mode INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2925792993 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateLiquidityPoolMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        s8 s9 XCHG
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s0 20 s() XCHG
        s1 s3 s0 XCHG3
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        18 s() POP
        18 s() 19 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        15 ROLL
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      562200191 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateLiquidityLockMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        s8 s9 XCHG
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s0 20 s() XCHG
        s1 s3 s0 XCHG3
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        17 s() POP
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        s15 16 s() XCHG
        15 ROLL
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2559550766 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateLockRatioMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        s8 s9 XCHG
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s0 20 s() XCHG
        s1 s3 s0 XCHG3
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        s9 POP
        38995 PUSHINT
        20 s() PUSH
        -1 GTINT
        IF:<{
          20 s() PUSH
          101 LESSINT
        }>ELSE<{
          FALSE
        }>
        THROWANYIFNOT
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        8 ROLL
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      1357296989 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateAnimalHelperPoolMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        s8 s9 XCHG
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s0 20 s() XCHG
        s1 s3 s0 XCHG3
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        16 s() POP
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        15 ROLL
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      3020695181 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateProjectPoolMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        s8 s9 XCHG
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s0 20 s() XCHG
        s1 s3 s0 XCHG3
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        s15 POP
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        14 ROLL
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      3245794019 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateInvestorsCreatorsPoolMessage$_load_without_opcode INLINECALLDICT
        2 1 BLKDROP2
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        s13 s14 XCHG
        s12 s13 XCHG
        s11 s12 XCHG
        s10 s11 XCHG
        s9 s10 XCHG
        s8 s9 XCHG
        s7 s8 XCHG
        s6 s7 XCHG
        s5 s6 XCHG
        s4 s5 XCHG
        s3 s4 XCHG
        s0 20 s() XCHG
        s1 s3 s0 XCHG3
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        s14 POP
        18 s() 19 s() XCHG
        17 s() 18 s() XCHG
        16 s() 17 s() XCHG
        s15 16 s() XCHG
        s14 s15 XCHG
        13 ROLL
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2820705846 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $UpdateDistributionRatioMessage$_load_without_opcode INLINECALLDICT
        s4 POP
        s4 POP
        19 s() 21 s() XCHG
        18 s() 20 s() XCHG
        17 s() 21 s() XCHG
        16 s() 20 s() XCHG
        s15 21 s() XCHG
        s14 20 s() XCHG
        s13 21 s() XCHG
        s12 20 s() XCHG
        s11 21 s() XCHG
        s10 20 s() XCHG
        s9 21 s() XCHG
        s8 20 s() XCHG
        s7 21 s() XCHG
        s6 20 s() XCHG
        s5 21 s() XCHG
        s4 20 s() XCHG
        s3 21 s() XCHG
        s2 20 s() XCHG
        s1 22 s() XCHG
        s0 23 s() XCHG
        $FundsDistributor$_fun_requireAdmin INLINECALLDICT
        s10 POP
        s10 POP
        s10 POP
        s10 POP
        18 s() PUSH
        20 s() PUSH
        ADD
        18 s() PUSH
        ADD
        17 s() PUSH
        ADD
        52463 PUSHINT
        SWAP
        100 EQINT
        THROWANYIFNOT
        s15 19 s() XCHG
        s14 18 s() XCHG
        s13 17 s() XCHG
        s12 16 s() XCHG
        s11 s15 XCHG
        s10 s14 XCHG
        4 10 REVERSE
        s10 s11 XCHG
        4 6 BLKSWAP
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      OVER
      2490013878 PUSHINT
      EQUAL
      IFJMP:<{
        NIP
        20 s() POP
        s0 19 s() XCHG
        $Deploy$_load_without_opcode INLINECALLDICT
        NIP
        $DeployOk$_constructor_queryId INLINECALLDICT
        $DeployOk$_store_cell INLINECALLDICT
        18 s() 20 s() XCHG
        17 s() 19 s() XCHG
        16 s() 18 s() XCHG
        s15 17 s() XCHG
        s14 16 s() XCHG
        s13 s15 XCHG
        s12 s14 XCHG
        s11 s13 XCHG
        s10 s12 XCHG
        s9 s11 XCHG
        s8 s10 XCHG
        s7 s9 XCHG
        s6 s8 XCHG
        s5 s7 XCHG
        s4 s6 XCHG
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s1 s2 XCHG
        $FundsDistributor$_fun_notify INLINECALLDICT
        $FundsDistributor$_contract_store INLINECALLDICT
        RETALT
      }>
      s0 21 s() XCHG
    }>
    SWAP
    0 EQINT
    SWAP
    33 LESSINT
    AND
    IFJMP:<{
      19 s() POP
      50000000 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      10 PUSHINT
      DIV
          MIN
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      SWAP
      SUB
      33719 PUSHINT
      s1 s8 PUSH2
      GEQ
      THROWANYIFNOT
      18 s() 19 s() XCHG
      17 s() 18 s() XCHG
      16 s() 17 s() XCHG
      s15 16 s() XCHG
      s14 s15 XCHG
      s13 s14 XCHG
      s12 s13 XCHG
      s11 s12 XCHG
      s10 s11 XCHG
      s9 s10 XCHG
      s8 s9 XCHG
      s7 s8 XCHG
      s6 s7 XCHG
      s5 s6 XCHG
      s4 s5 XCHG
      s3 s4 XCHG
      s0 20 s() XCHG
      s1 s3 s0 XCHG3
      $FundsDistributor$_fun_validatePoolAddresses INLINECALLDICT
      19 s() 20 s() XCHG
      18 s() 19 s() XCHG
      17 s() 18 s() XCHG
      16 s() 17 s() XCHG
      s15 16 s() XCHG
      15 ROLL
      0 PUSHINT
      $FundsDistributor$_fun_distributeAmount INLINECALLDICT
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    s0 19 s() XCHG
    HASHSU
    DUP
    45907004148254262240995389898995332214221301061848318296583258662993964453915 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
          NEWC
      18 s() PUSH
          STSLICER
      17 s() PUSH
          STSLICER
      16 s() PUSH
          STSLICER
      s15 PUSH
          STSLICER
      s14 PUSH
          STSLICER
      s13 PUSH
          STSLICER
      s12 s(-1) PUXC
      8 STU
      s11 s(-1) PUXC
      8 STU
      s10 s(-1) PUXC
      8 STU
      s9 s(-1) PUXC
      8 STU
      s8 s(-1) PUXC
      8 STU
          ENDC
      __tact_context_get_sender INLINECALLDICT
      0 PUSHINT
      ROT
      65 PUSHINT
      SWAP
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      2 13 BLKSWAP
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    DUP
    97204441276260215630848469740006770211586231647030209891919168960674164092177 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
          NEWC
      s1 s(-1) PUXC
      64 STU
      19 s() PUSH
      SWAP
      64 STU
      20 s() PUSH
          STVARUINT16
          ENDC
      __tact_context_get_sender INLINECALLDICT
      0 PUSHINT
      ROT
      65 PUSHINT
      SWAP
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      2 13 BLKSWAP
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    DUP
    52710074573064146980632043839404431975011422348860266157359343845743445407290 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s3 POP
      15038 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      18 s() PUSH
      SWAP
      SDEQ
      IF:<{
        TRUE
      }>ELSE<{
        s5 PUSH
        ISNULL
        NOT
        IF:<{
          __tact_context_get_sender INLINECALLDICT
          s6 s(-1) PUXC
          SDEQ
        }>ELSE<{
          FALSE
        }>
      }>
      THROWANYIFNOT
          NEWC
      __tact_context_get_sender INLINECALLDICT
          STSLICER
          NOW
      SWAP
      64 STU
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
          STSLICER
          ENDC
      s2 PUSH
      257 PUSHINT
      s0 s2 XCHG
      __tact_dict_set_int_cell INLINECALLDICT
      SWAP
      INC
          NOW
      86400 PUSHINT
      ADD
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      6 0 REVERSE
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    DUP
    89538378288174616448625233232755441304963542327258316350342546812088397296175 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
      32 LDU
      DROP
      s2 PUSH
      257 PUSHINT
      s2 PUSH
      __tact_dict_get_int_cell INLINECALLDICT
      59037 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
          CTOS
          LDMSGADDR
      64 LDU
      13935 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s1 s4 XCHG
      SDEQ
      NOT
      s1 s3 XCHG
      THROWANYIFNOT
      19 s() 20 s() XCHG
      18 s() 20 s() XCHG
      17 s() 20 s() XCHG
      16 s() 20 s() XCHG
      s15 20 s() XCHG
      s14 20 s() XCHG
      s13 20 s() XCHG
      s12 20 s() XCHG
      s11 20 s() XCHG
      s10 20 s() XCHG
      s9 20 s() XCHG
      s8 20 s() XCHG
      s7 20 s() XCHG
      s6 20 s() XCHG
      s5 20 s() XCHG
      s4 20 s() XCHG
      s3 20 s() XCHG
      s2 20 s() XCHG
      s1 21 s() XCHG
      s0 22 s() XCHG
      $FundsDistributor$_fun_requireAdmin INLINECALLDICT
      8723 PUSHINT
          NOW
      SWAP
      s0 24 s() XCHG
      SUB
      604800 PUSHINT
      LEQ
      s1 23 s() XCHG
      THROWANYIFNOT
      s0 20 s() XCHG
          LDREF
      DROP
          CTOS
      32 LDU
      OVER
      1 EQINT
      IF:<{
        NIP
        8 LDU
            LDMSGADDR
        DROP
        OVER
        1 EQINT
        IF:<{
          NIP
          17 s() POP
        }>ELSE<{
          OVER
          2 EQINT
          IF:<{
            NIP
            16 s() POP
          }>ELSE<{
            OVER
            3 EQINT
            IF:<{
              NIP
              s15 POP
            }>ELSE<{
              OVER
              4 EQINT
              IF:<{
                NIP
                s14 POP
              }>ELSE<{
                SWAP
                5 EQINT
                IF:<{
                  s13 POP
                }>ELSE<{
                  DROP
                }>
              }>
            }>
          }>
        }>
      }>ELSE<{
        OVER
        2 EQINT
        IF:<{
          NIP
          s9 POP
          s9 POP
          s9 POP
          s9 POP
          s0 s5 XCHG
          8 LDU
          8 LDU
          8 LDU
          8 LDU
          DROP
          52463 PUSHINT
          s4 s3 PUSH2
          ADD
          s3 PUSH
          ADD
          s2 PUSH
          ADD
          100 EQINT
          THROWANYIFNOT
        }>ELSE<{
          SWAP
          3 EQINT
          IF:<{
            s8 POP
            s0 s7 XCHG
            8 LDU
            DROP
            38995 PUSHINT
            OVER
            101 LESSINT
            THROWANYIFNOT
            s0 s7 XCHG
          }>ELSE<{
            DROP
          }>
          s11 s10 s9 XCHG3
          s3 s8 XCHG
          3 ROLL
        }>
        s3 s11 XCHG
        s10 s1 s8 XCHG3
        3 -ROLL
        s0 s9 XCHG
      }>
      257 PUSHINT
      SWAP
      s0 19 s() XCHG
      PUSHNULL
      __tact_dict_set_int_cell INLINECALLDICT
      16 s() 19 s() XCHG
      s15 18 s() XCHG
      s14 17 s() XCHG
      s13 16 s() XCHG
      s12 s15 XCHG
      s11 s14 XCHG
      s10 s13 XCHG
      s9 s12 XCHG
      s8 s11 XCHG
      s7 s10 XCHG
      s6 s9 XCHG
      s5 s8 XCHG
      s4 s7 XCHG
      s3 s6 XCHG
      s5 s3 s3 XCHG3
      s0 s4 XCHG
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    DUP
    30411611795114176262939078448127847515974500631729375129222324409143479139438 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s3 POP
      s4 POP
      63750 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      17 s() PUSH
      SWAP
      SDEQ
      THROWANYIFNOT
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
          LDMSGADDR
      DROP
          NOW
      86400 PUSHINT
      ADD
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s1 s7 XCHG
      s4 s6 XCHG
      s4 s1 s5 XCHG3
      3 -ROLL
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    DUP
    81731551580751216797792947837534658403214764309735562742868676550601290004461 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s4 POP
      50578 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      18 s() PUSH
      SWAP
      SDEQ
      THROWANYIFNOT
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
          LDMSGADDR
      DROP
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s0 s6 XCHG
      s3 s5 XCHG
      s4 s0 s3 XCHG3
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    DUP
    25678401334924890948459261632432871192955377477691336671171566774362516579746 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      s5 POP
      16 s() POP
      23144 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s4 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      63477 PUSHINT
          NOW
      s3 PUSH
      604800 PUSHINT
      ADD
      GREATER
      THROWANYIFNOT
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
          LDMSGADDR
      DROP
      s0 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      s12 s14 XCHG
      s11 s13 XCHG
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      PUSHNULL
      s0 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s1 s3 XCHG3
      -ROT
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    75368970919313664525420967849121839433578306076864448613872267817573137436917 PUSHINT
    EQUAL
    IFJMP:<{
      17 s() 19 s() XCHG
      16 s() 18 s() XCHG
      s15 17 s() XCHG
      s14 16 s() XCHG
      s13 s15 XCHG
      2 13 BLKSWAP
      $FundsDistributor$_fun_requireAdmin INLINECALLDICT
      s8 POP
      __tact_context_get INLINECALLDICT
      $Context$_get_raw INLINECALLDICT
          LDVARUINT16
      DROP
      61135 PUSHINT
      OVER
      0 GTINT
      THROWANYIFNOT
      s0 s8 XCHG
      $FundsDistributor$_contract_store INLINECALLDICT
    }>
    15 BLKDROP
    5 BLKDROP
    130 THROW
  }>
}END>c
