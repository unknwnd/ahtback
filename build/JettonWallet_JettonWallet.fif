// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `D:/cursor/a/ahtback/build/JettonWallet_JettonWallet.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_context_get_sender
  DECLPROC $GetWalletDataMessage$_load_without_opcode
  DECLPROC $InternalTransferMessage$_load_without_opcode
  DECLPROC $TransferMessage$_load_without_opcode
  DECLPROC $BurnMessage$_load_without_opcode
  DECLPROC $JettonWallet$_store
  DECLPROC $JettonWallet$_load
  DECLPROC $JettonWalletData$_to_external
  DECLPROC $JettonWallet$init$_load
  DECLPROC $JettonWallet$_contract_init
  DECLPROC $JettonWallet$_contract_load
  DECLPROC $JettonWallet$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $StateInit$_constructor_code_data
  DECLPROC $JettonWallet$_fun_calculate_jetton_wallet_code
  DECLPROC $JettonWallet$_fun_calculate_jetton_wallet_init
  DECLPROC $JettonWallet$_fun_calculate_jetton_wallet_address
  DECLPROC $JettonWalletData$_constructor_balance_owner_jettonMaster_walletCode
  DECLPROC $JettonWallet$_fun_get_wallet_data
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $SendParameters$_constructor_to_bounce_value_mode_body
  97026 DECLMETHOD %get_wallet_data
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $GetWalletDataMessage$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $InternalTransferMessage$_load_without_opcode PROCINLINE:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    LDMSGADDR
    LDVARUINT16
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    6 -ROLL
  }>
  $TransferMessage$_load_without_opcode PROCINLINE:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    LDMSGADDR
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    LDVARUINT16
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    7 -ROLL
  }>
  $BurnMessage$_load_without_opcode PROCINLINE:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    3 -ROLL
  }>
  $JettonWallet$_store PROCINLINE:<{
    s2 s3 XCHG2
    257 PUSHINT
    STIX
    SWAP
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonWallet$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDMSGADDR
    3 -ROLL
  }>
  $JettonWalletData$_to_external PROCINLINE:<{
  }>
  $JettonWallet$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    -ROT
  }>
  $JettonWallet$_contract_init PROCINLINE:<{
    0 PUSHINT
    s0 s2 XCHG
  }>
  $JettonWallet$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $JettonWallet$_load INLINECALLDICT
      1 3 BLKDROP2
    }>ELSE<{
      $JettonWallet$init$_load INLINECALLDICT
      s0 s2 XCHG
      ENDS
      SWAP
      $JettonWallet$_contract_init INLINECALLDICT
    }>
  }>
  $JettonWallet$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    3 -ROLL
    $JettonWallet$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $StateInit$_constructor_code_data PROCINLINE:<{
  }>
  $JettonWallet$_fun_calculate_jetton_wallet_code PROCREF:<{
        NEWC
        ENDC
  }>
  $JettonWallet$_fun_calculate_jetton_wallet_init PROCREF:<{
    s4 s3 s4 XCHG3
    $JettonWallet$_fun_calculate_jetton_wallet_code INLINECALLDICT
        NEWC
    s0 s5 XCHG2
        STSLICER
    s0 s5 XCHG2
        STSLICER
        ENDC
    s1 s3 XCHG
    $StateInit$_constructor_code_data INLINECALLDICT
    s2 s4 XCHG
  }>
  $JettonWallet$_fun_calculate_jetton_wallet_address PROCREF:<{
    $JettonWallet$_fun_calculate_jetton_wallet_init INLINECALLDICT
    $global_contractAddress INLINECALLDICT
  }>
  $JettonWalletData$_constructor_balance_owner_jettonMaster_walletCode PROCINLINE:<{
  }>
  $JettonWallet$_fun_get_wallet_data PROCREF:<{
    s2 s1 s0 PUSH3
    $JettonWallet$_fun_calculate_jetton_wallet_code INLINECALLDICT
    s3 s6 XCHG
    s5 s4 s0 XCHG3
    $JettonWalletData$_constructor_balance_owner_jettonMaster_walletCode INLINECALLDICT
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $SendParameters$_constructor_to_bounce_value_mode_body PROCINLINE:<{
    s1 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s1 s3 s3 XCHG3
  }>
  %get_wallet_data PROC:<{
    $JettonWallet$_contract_load INLINECALLDICT
    $JettonWallet$_fun_get_wallet_data INLINECALLDICT
    3 4 BLKDROP2
    $JettonWalletData$_to_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $JettonWallet$_contract_load INLINECALLDICT
    s0 s4 XCHG
    IFJMP:<{
      4 BLKDROP
    }>
    s0 s2 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    3083284313 PUSHINT
    EQUAL
    IFJMP:<{
      2DROP
      s0 s2 XCHG
      $JettonWallet$_fun_get_wallet_data INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
      0 PUSHINT
      64 PUSHINT
          NEWC
      s0 s7 XCHG2
          STVARUINT16
      s0 s5 XCHG2
          STSLICER
      s0 s3 XCHG2
          STSLICER
          STREF
          ENDC
      s1 s3 XCHG
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    OVER
    2575040957 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $InternalTransferMessage$_load_without_opcode INLINECALLDICT
      s2 s3 XCHG
      3 BLKDROP
      s3 POP
      __tact_context_get_sender INLINECALLDICT
      s6 s(-1) PUXC
      SDEQ
      FALSE
      4429 PUSHINT
      s0 s2 XCHG
      IF:<{
        DROP
        TRUE
      }>ELSE<{
      }>
      THROWANYIFNOT
      s3 s3 XCPU
      ADD
          B{b5ee9c72410101010024000043800000000000000000000000000000000000000000000000000000000000000000104aec829d} B>boc <s PUSHSLICE
      s3 PUSH
      SDEQ
      NOT
      IF:<{
        0 PUSHINT
        64 PUSHINT
            NEWC
        1935855772 PUSHINT
        SWAP
        32 STU
        s1 s4 XCHG
        64 STU
        s0 s5 XCHG2
            STVARUINT16
        s5 PUSH
            STSLICER
            ENDC
        s4 s4 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        3 1 BLKDROP2
      }>
      s0 s2 XCHG
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    OVER
    3109881090 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $TransferMessage$_load_without_opcode INLINECALLDICT
      s2 POP
      s6 POP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s9 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      54615 PUSHINT
      s7 s4 PUSH2
      GEQ
      THROWANYIFNOT
      s6 s3 XCPU
      SUB
      s7 s8 s2 XCPUXC
      s9 s9 XCPU
      $JettonWallet$_fun_calculate_jetton_wallet_address INLINECALLDICT
      TRUE
      s7 PUSH
      50000000 PUSHINT
      ADD
      1 PUSHINT
          NEWC
      395134233 PUSHINT
      SWAP
      32 STU
      s9 s(-1) PUXC
      64 STU
      s8 PUSH
          STVARUINT16
      s6 PUSH
          STSLICER
      s12 PUSH
          STSLICER
      s0 s10 XCHG2
          STVARUINT16
      s1 s10 XCHG
          STOPTREF
          ENDC
      s4 s3 s0 XCHG3
      s9 s8 s0 XCHG3
      $SendParameters$_constructor_to_bounce_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
          B{b5ee9c72410101010024000043800000000000000000000000000000000000000000000000000000000000000000104aec829d} B>boc <s PUSHSLICE
      s6 PUSH
      SDEQ
      NOT
      IF:<{
        0 PUSHINT
        64 PUSHINT
            NEWC
        1935855772 PUSHINT
        SWAP
        32 STU
        s1 s5 XCHG
        64 STU
        s0 s3 XCHG2
            STVARUINT16
        s0 s7 XCHG2
            STSLICER
            ENDC
        s3 s5 XCHG
        s1 s2 XCHG
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        s1 s2 XCHG
      }>ELSE<{
        s3 s6 XCHG
        s5 POP
        3 BLKDROP
      }>
      ROT
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    SWAP
    536789078 PUSHINT
    EQUAL
    IFJMP:<{
      $BurnMessage$_load_without_opcode INLINECALLDICT
      s3 POP
      14534 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s6 s(-1) PUXC
      SDEQ
      THROWANYIFNOT
      54615 PUSHINT
      s4 s1 PUSH2
      GEQ
      THROWANYIFNOT
      s3 s3 XCPU
      SUB
      0 PUSHINT
      64 PUSHINT
          NEWC
      1499400124 PUSHINT
      SWAP
      32 STU
      s1 s4 XCHG
      64 STU
      s0 s5 XCHG2
          STVARUINT16
      s5 PUSH
          STSLICER
      s0 s3 XCHG2
          STSLICER
          ENDC
      s5 PUSH
      s0 s3 XCHG
      s4 s4 s4 XCHG3
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s2 XCHG
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    4 BLKDROP
    130 THROW
  }>
}END>c
