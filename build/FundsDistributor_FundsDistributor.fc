#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; FundsDistributor_FundsDistributor.headers.fc
;;
;; Header files for FundsDistributor
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_crc16
(slice) __tact_crc16(slice data) inline_ref;

;; __tact_base64_encode
(slice) __tact_base64_encode(slice data) inline_ref;

;; __tact_address_to_user_friendly
(slice) __tact_address_to_user_friendly(slice address) inline_ref;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_slice_neq
int __tact_slice_neq(slice a, slice b) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UpdateLiquidityPoolMessage$_load_without_opcode
(slice, ((int, slice))) $UpdateLiquidityPoolMessage$_load_without_opcode(slice sc_0) inline;

;; $UpdateAnimalHelperPoolMessage$_load_without_opcode
(slice, ((int, slice))) $UpdateAnimalHelperPoolMessage$_load_without_opcode(slice sc_0) inline;

;; $UpdateProjectPoolMessage$_load_without_opcode
(slice, ((int, slice))) $UpdateProjectPoolMessage$_load_without_opcode(slice sc_0) inline;

;; $UpdateInvestorsCreatorsPoolMessage$_load_without_opcode
(slice, ((int, slice))) $UpdateInvestorsCreatorsPoolMessage$_load_without_opcode(slice sc_0) inline;

;; $UpdateLiquidityLockMessage$_load_without_opcode
(slice, ((int, slice))) $UpdateLiquidityLockMessage$_load_without_opcode(slice sc_0) inline;

;; $UpdateDistributionRatioMessage$_load_without_opcode
(slice, ((int, int, int, int, int))) $UpdateDistributionRatioMessage$_load_without_opcode(slice sc_0) inline;

;; $UpdateLockRatioMessage$_load_without_opcode
(slice, ((int, int))) $UpdateLockRatioMessage$_load_without_opcode(slice sc_0) inline;

;; $EmergencyWithdrawMessage$_load_without_opcode
(slice, ((int))) $EmergencyWithdrawMessage$_load_without_opcode(slice sc_0) inline;

;; $AdminConfig$_store
builder $AdminConfig$_store(builder build_0, (slice, slice, int, int, cell) v) inline;

;; $AdminConfig$_load
(slice, ((slice, slice, int, int, cell))) $AdminConfig$_load(slice sc_0) inline;

;; $TransactionSummary$_store
builder $TransactionSummary$_store(builder build_0, (int, int, int) v) inline;

;; $TransactionSummary$_load
(slice, ((int, int, int))) $TransactionSummary$_load(slice sc_0) inline;

;; $FundsDistributor$_store
builder $FundsDistributor$_store(builder build_0, (slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) v) inline;

;; $FundsDistributor$_load
(slice, ((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)))) $FundsDistributor$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Context$_get_raw
_ $Context$_get_raw((int, slice, int, slice) v) inline;

;; $FundsDistributor$init$_load
(slice, ((slice, slice, slice, slice, slice, slice))) $FundsDistributor$init$_load(slice sc_0) inline;

;; $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals
((slice, slice, int, int, cell)) $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals(slice $tempAdmin, slice $recoveryAddress, int $lockUntil, int $proposalId, cell $pendingProposals) inline;

;; $TransactionSummary$_constructor_successCount_failCount_totalSent
((int, int, int)) $TransactionSummary$_constructor_successCount_failCount_totalSent(int $successCount, int $failCount, int $totalSent) inline;

;; $FundsDistributor$_contract_init
(slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $FundsDistributor$_contract_init(slice $owner, slice $liquidityPool, slice $liquidityLock, slice $animalHelperPool, slice $projectPool, slice $investorsCreatorsPool) impure inline;

;; $FundsDistributor$_contract_load
(slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $FundsDistributor$_contract_load() impure inline;

;; $FundsDistributor$_contract_store
() $FundsDistributor$_contract_store((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) v) impure inline;

;; $FundsDistributor$_fun_requireAdmin
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_requireAdmin((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self) impure inline_ref;

;; $FundsDistributor$_fun_validatePoolAddresses
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_validatePoolAddresses((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $FundsDistributor$_fun_sendFunds
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), int) $FundsDistributor$_fun_sendFunds((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, slice $to, int $amount, int $queryId) impure inline_ref;

;; $FundsDistributor$_fun_distributeAmount
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_distributeAmount((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, int $amount, int $queryId) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $FundsDistributor$_fun_forward
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_forward((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $FundsDistributor$_fun_notify
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_notify((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, cell $body) impure inline;

;; $FundsDistributor$_fun_owner
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), slice) $FundsDistributor$_fun_owner((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;


;; FundsDistributor_FundsDistributor.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(slice, slice) __tact_load_address_opt(slice cs) inline {
    if (cs.preload_uint(2) != 0) {
        slice raw = cs~load_msg_addr();
        return (cs, raw);
    } else {
        cs~skip_bits(2);
        return (cs, null());
    }
}

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        b = b.store_uint(0, 2);
        return b;
    } else {
        return b.store_slice(address);
    }
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(slice) __tact_preload_offset(slice s, int offset, int bits) asm """
    SDSUBSTR
""";

(slice) __tact_crc16(slice data) inline_ref {
    slice new_data = begin_cell()
        .store_slice(data)
        .store_slice("0000"s)
    .end_cell().begin_parse();
    int reg = 0;
    while (~ new_data.slice_data_empty?()) {
        int byte = new_data~load_uint(8);
        int mask = 0x80;
        while (mask > 0) {
            reg <<= 1;
            if (byte & mask) {
                reg += 1;
            }
            mask >>= 1;
            if (reg > 0xffff) {
                reg &= 0xffff;
                reg ^= 0x1021;
            }
        }
    }
    (int q, int r) = divmod(reg, 256);
    return begin_cell()
        .store_uint(q, 8)
        .store_uint(r, 8)
    .end_cell().begin_parse();
}

(slice) __tact_base64_encode(slice data) inline_ref {
    slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
    builder res = begin_cell();

    while (data.slice_bits() >= 24) {
        (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));

        int n = (bs1 << 16) | (bs2 << 8) | bs3;

        res = res
            .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
    }

    return res.end_cell().begin_parse();
}

(slice) __tact_address_to_user_friendly(slice address) inline_ref {
    (int wc, int hash) = address.parse_std_addr();

    slice user_friendly_address = begin_cell()
        .store_slice("11"s)
        .store_uint((wc + 0x100) % 0x100, 8)
        .store_uint(hash, 256)
    .end_cell().begin_parse();

    slice checksum = __tact_crc16(user_friendly_address);
    slice user_friendly_address_with_checksum = begin_cell()
        .store_slice(user_friendly_address)
        .store_slice(checksum)
    .end_cell().begin_parse();

    return __tact_base64_encode(user_friendly_address_with_checksum);
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int __tact_slice_neq(slice a, slice b) inline {
    return (a.slice_hash() !=  b.slice_hash());
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_min(int $x, int $y) impure asm """
    MIN
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

int $global_now() impure asm """
    NOW
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeSlice(builder $self, slice $slice) impure asm """
    STSLICER
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

(slice, cell) $Slice$_fun_loadRef(slice $self) impure asm( -> 1 0) """
    LDREF
""";

(slice, int) $Slice$_fun_loadCoins(slice $self) impure asm( -> 1 0) """
    LDVARUINT16
""";

(slice, slice) $Slice$_fun_loadAddress(slice $self) impure asm( -> 1 0) """
    LDMSGADDR
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_forward((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), ());
}

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_notify((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, cell $body) impure inline {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), ());
}

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), slice) $FundsDistributor$_fun_owner((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self) impure inline_ref {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    var $fresh$ret_7 = $self'owner;
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), $fresh$ret_7);
}

;; FundsDistributor_FundsDistributor.constants.fc
;; String ""
slice __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7() asm """
    B{b5ee9c724101010100020000004cacb9cd} B>boc <s PUSHSLICE
""";

;; FundsDistributor_FundsDistributor.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

_ $Context$_get_raw((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'raw;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline {
    return ($mode, null(), null(), null(), $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: UpdateLiquidityPoolMessage
;; Header: 0xae640ee1
;; TLB: update_liquidity_pool_message#ae640ee1 queryId:int257 new_address:address = UpdateLiquidityPoolMessage
;;

(slice, ((int, slice))) $UpdateLiquidityPoolMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'new_address = sc_0~load_msg_addr();
    return (sc_0, (v'queryId, v'new_address));
}

;;
;; Type: UpdateAnimalHelperPoolMessage
;; Header: 0x50e6b55d
;; TLB: update_animal_helper_pool_message#50e6b55d queryId:int257 new_address:address = UpdateAnimalHelperPoolMessage
;;

(slice, ((int, slice))) $UpdateAnimalHelperPoolMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'new_address = sc_0~load_msg_addr();
    return (sc_0, (v'queryId, v'new_address));
}

;;
;; Type: UpdateProjectPoolMessage
;; Header: 0xb40c268d
;; TLB: update_project_pool_message#b40c268d queryId:int257 new_address:address = UpdateProjectPoolMessage
;;

(slice, ((int, slice))) $UpdateProjectPoolMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'new_address = sc_0~load_msg_addr();
    return (sc_0, (v'queryId, v'new_address));
}

;;
;; Type: UpdateInvestorsCreatorsPoolMessage
;; Header: 0xc176e2e3
;; TLB: update_investors_creators_pool_message#c176e2e3 queryId:int257 new_address:address = UpdateInvestorsCreatorsPoolMessage
;;

(slice, ((int, slice))) $UpdateInvestorsCreatorsPoolMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'new_address = sc_0~load_msg_addr();
    return (sc_0, (v'queryId, v'new_address));
}

;;
;; Type: UpdateLiquidityLockMessage
;; Header: 0x21827e7f
;; TLB: update_liquidity_lock_message#21827e7f queryId:int257 new_address:address = UpdateLiquidityLockMessage
;;

(slice, ((int, slice))) $UpdateLiquidityLockMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'new_address = sc_0~load_msg_addr();
    return (sc_0, (v'queryId, v'new_address));
}

;;
;; Type: UpdateDistributionRatioMessage
;; Header: 0xa8208e36
;; TLB: update_distribution_ratio_message#a8208e36 queryId:int257 liq_percent:int257 animal_percent:int257 proj_percent:int257 inv_creat_percent:int257 = UpdateDistributionRatioMessage
;;

(slice, ((int, int, int, int, int))) $UpdateDistributionRatioMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'liq_percent = sc_0~load_int(257);
    var v'animal_percent = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'proj_percent = sc_1~load_int(257);
    var v'inv_creat_percent = sc_1~load_int(257);
    return (sc_0, (v'queryId, v'liq_percent, v'animal_percent, v'proj_percent, v'inv_creat_percent));
}

;;
;; Type: UpdateLockRatioMessage
;; Header: 0x988fa52e
;; TLB: update_lock_ratio_message#988fa52e queryId:int257 lock_percent:int257 = UpdateLockRatioMessage
;;

(slice, ((int, int))) $UpdateLockRatioMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    var v'lock_percent = sc_0~load_int(257);
    return (sc_0, (v'queryId, v'lock_percent));
}

;;
;; Type: EmergencyWithdrawMessage
;; Header: 0xe5d4396e
;; TLB: emergency_withdraw_message#e5d4396e queryId:int257 = EmergencyWithdrawMessage
;;

(slice, ((int))) $EmergencyWithdrawMessage$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_int(257);
    return (sc_0, (v'queryId));
}

;;
;; Type: AdminConfig
;; TLB: _ tempAdmin:address recoveryAddress:address lockUntil:int257 proposalId:int257 pendingProposals:dict<int, ^cell> = AdminConfig
;;

builder $AdminConfig$_store(builder build_0, (slice, slice, int, int, cell) v) inline {
    var (v'tempAdmin, v'recoveryAddress, v'lockUntil, v'proposalId, v'pendingProposals) = v;
    build_0 = __tact_store_address_opt(build_0, v'tempAdmin);
    build_0 = build_0.store_slice(v'recoveryAddress);
    build_0 = build_0.store_int(v'lockUntil, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'proposalId, 257);
    build_1 = build_1.store_dict(v'pendingProposals);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, int, int, cell))) $AdminConfig$_load(slice sc_0) inline {
    var v'tempAdmin = sc_0~__tact_load_address_opt();
    var v'recoveryAddress = sc_0~load_msg_addr();
    var v'lockUntil = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'proposalId = sc_1~load_int(257);
    var v'pendingProposals = sc_1~load_dict();
    return (sc_0, (v'tempAdmin, v'recoveryAddress, v'lockUntil, v'proposalId, v'pendingProposals));
}

((slice, slice, int, int, cell)) $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals(slice $tempAdmin, slice $recoveryAddress, int $lockUntil, int $proposalId, cell $pendingProposals) inline {
    return ($tempAdmin, $recoveryAddress, $lockUntil, $proposalId, $pendingProposals);
}

;;
;; Type: TransactionSummary
;; TLB: _ successCount:int257 failCount:int257 totalSent:int257 = TransactionSummary
;;

builder $TransactionSummary$_store(builder build_0, (int, int, int) v) inline {
    var (v'successCount, v'failCount, v'totalSent) = v;
    build_0 = build_0.store_int(v'successCount, 257);
    build_0 = build_0.store_int(v'failCount, 257);
    build_0 = build_0.store_int(v'totalSent, 257);
    return build_0;
}

(slice, ((int, int, int))) $TransactionSummary$_load(slice sc_0) inline {
    var v'successCount = sc_0~load_int(257);
    var v'failCount = sc_0~load_int(257);
    var v'totalSent = sc_0~load_int(257);
    return (sc_0, (v'successCount, v'failCount, v'totalSent));
}

((int, int, int)) $TransactionSummary$_constructor_successCount_failCount_totalSent(int $successCount, int $failCount, int $totalSent) inline {
    return ($successCount, $failCount, $totalSent);
}

;;
;; Type: FundsDistributor
;; TLB: _ owner:address liquidityPool:address liquidityLock:address animalHelperPool:address projectPool:address investorsCreatorsPool:address liquidityPercent:int257 animalHelperPercent:int257 projectPercent:int257 investorsCreatorsPercent:int257 lockPercent:int257 minDistributionAmount:int257 adminConfig:AdminConfig{tempAdmin:address,recoveryAddress:address,lockUntil:int257,proposalId:int257,pendingProposals:dict<int, ^cell>} transactionMetrics:TransactionSummary{successCount:int257,failCount:int257,totalSent:int257} = FundsDistributor
;;

builder $FundsDistributor$_store(builder build_0, (slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) v) inline {
    var (v'owner, v'liquidityPool, v'liquidityLock, v'animalHelperPool, v'projectPool, v'investorsCreatorsPool, v'liquidityPercent, v'animalHelperPercent, v'projectPercent, v'investorsCreatorsPercent, v'lockPercent, v'minDistributionAmount, (v'adminConfig'tempAdmin, v'adminConfig'recoveryAddress, v'adminConfig'lockUntil, v'adminConfig'proposalId, v'adminConfig'pendingProposals), (v'transactionMetrics'successCount, v'transactionMetrics'failCount, v'transactionMetrics'totalSent)) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'liquidityPool);
    build_0 = build_0.store_slice(v'liquidityLock);
    var build_1 = begin_cell();
    build_1 = build_1.store_slice(v'animalHelperPool);
    build_1 = build_1.store_slice(v'projectPool);
    build_1 = build_1.store_slice(v'investorsCreatorsPool);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'liquidityPercent, 257);
    build_2 = build_2.store_int(v'animalHelperPercent, 257);
    build_2 = build_2.store_int(v'projectPercent, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'investorsCreatorsPercent, 257);
    build_3 = build_3.store_int(v'lockPercent, 257);
    build_3 = build_3.store_int(v'minDistributionAmount, 257);
    var build_4 = begin_cell();
    build_4 = $AdminConfig$_store(build_4, (v'adminConfig'tempAdmin, v'adminConfig'recoveryAddress, v'adminConfig'lockUntil, v'adminConfig'proposalId, v'adminConfig'pendingProposals));
    var build_5 = begin_cell();
    build_5 = $TransactionSummary$_store(build_5, (v'transactionMetrics'successCount, v'transactionMetrics'failCount, v'transactionMetrics'totalSent));
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)))) $FundsDistributor$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'liquidityPool = sc_0~load_msg_addr();
    var v'liquidityLock = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'animalHelperPool = sc_1~load_msg_addr();
    var v'projectPool = sc_1~load_msg_addr();
    var v'investorsCreatorsPool = sc_1~load_msg_addr();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'liquidityPercent = sc_2~load_int(257);
    var v'animalHelperPercent = sc_2~load_int(257);
    var v'projectPercent = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'investorsCreatorsPercent = sc_3~load_int(257);
    var v'lockPercent = sc_3~load_int(257);
    var v'minDistributionAmount = sc_3~load_int(257);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'adminConfig = sc_4~$AdminConfig$_load();
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'transactionMetrics = sc_5~$TransactionSummary$_load();
    return (sc_0, (v'owner, v'liquidityPool, v'liquidityLock, v'animalHelperPool, v'projectPool, v'investorsCreatorsPool, v'liquidityPercent, v'animalHelperPercent, v'projectPercent, v'investorsCreatorsPercent, v'lockPercent, v'minDistributionAmount, v'adminConfig, v'transactionMetrics));
}

(slice, ((slice, slice, slice, slice, slice, slice))) $FundsDistributor$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'liquidityPool = sc_0~load_msg_addr();
    var v'liquidityLock = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'animalHelperPool = sc_1~load_msg_addr();
    var v'projectPool = sc_1~load_msg_addr();
    var v'investorsCreatorsPool = sc_1~load_msg_addr();
    return (sc_0, (v'owner, v'liquidityPool, v'liquidityLock, v'animalHelperPool, v'projectPool, v'investorsCreatorsPool));
}

(slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $FundsDistributor$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$FundsDistributor$_load();
    }
    else {
        (slice $owner, slice $liquidityPool, slice $liquidityLock, slice $animalHelperPool, slice $projectPool, slice $investorsCreatorsPool) = $sc~$FundsDistributor$init$_load();
        $sc.end_parse();
        return $FundsDistributor$_contract_init($owner, $liquidityPool, $liquidityLock, $animalHelperPool, $projectPool, $investorsCreatorsPool);
    }
}

() $FundsDistributor$_contract_store((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $FundsDistributor$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract FundsDistributor functions
;;

(slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $FundsDistributor$_contract_init(slice $owner, slice $liquidityPool, slice $liquidityLock, slice $animalHelperPool, slice $projectPool, slice $investorsCreatorsPool) impure inline {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = (null(), null(), null(), null(), null(), null(), 65, 20, 10, 5, 70, 10000000, null(), null());
    $self'owner = $owner;
    $self'liquidityPool = $liquidityPool;
    $self'liquidityLock = $liquidityLock;
    $self'animalHelperPool = $animalHelperPool;
    $self'projectPool = $projectPool;
    $self'investorsCreatorsPool = $investorsCreatorsPool;
    ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals) = $AdminConfig$_constructor_tempAdmin_recoveryAddress_lockUntil_proposalId_pendingProposals(null(), $owner, 0, 0, null());
    ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent) = $TransactionSummary$_constructor_successCount_failCount_totalSent(0, 0, 0);
    return ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent));
}

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_requireAdmin((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self) impure inline_ref {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    throw_unless(31651, ($global_now() > $self'adminConfig'lockUntil));
    int $isAdmin = ( equal_slices_bits($self'owner, __tact_context_get_sender()) );
    if ((~ null?($self'adminConfig'tempAdmin))) {
        $isAdmin = ( ($isAdmin) ? (true) : (( equal_slices_bits(__tact_not_null($self'adminConfig'tempAdmin), __tact_context_get_sender()) )) );
    }
    throw_unless(42435, $isAdmin);
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), ());
}

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_validatePoolAddresses((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self) impure inline_ref {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    throw_unless(36917, __tact_slice_neq(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __tact_address_to_user_friendly($self'liquidityPool)));
    throw_unless(49912, __tact_slice_neq(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __tact_address_to_user_friendly($self'liquidityLock)));
    throw_unless(29638, __tact_slice_neq(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __tact_address_to_user_friendly($self'animalHelperPool)));
    throw_unless(7826, __tact_slice_neq(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __tact_address_to_user_friendly($self'projectPool)));
    throw_unless(4989, __tact_slice_neq(__gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), __tact_address_to_user_friendly($self'investorsCreatorsPool)));
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), ());
}

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), int) $FundsDistributor$_fun_sendFunds((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, slice $to, int $amount, int $queryId) impure inline_ref {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    if (($amount < $self'minDistributionAmount)) {
        var $fresh$ret_5 = false;
        return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), $fresh$ret_5);
    }
    $global_send($SendParameters$_constructor_to_bounce_value_mode_body($to, true, $amount, 1, $Builder$_fun_endCell(store_uint($global_beginCell(), $queryId, 64))));
    var $fresh$ret_6 = true;
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), $fresh$ret_6);
}

((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)), ()) $FundsDistributor$_fun_distributeAmount((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, (slice, slice, int, int, cell), (int, int, int)) $self, int $amount, int $queryId) impure inline_ref {
    var (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))) = $self;
    throw_unless(33719, ($amount >= $self'minDistributionAmount));
    int $liquidityAmount = (($amount * $self'liquidityPercent) / 100);
    int $animalHelperAmount = (($amount * $self'animalHelperPercent) / 100);
    int $projectAmount = (($amount * $self'projectPercent) / 100);
    int $investorsCreatorsAmount = (($amount * $self'investorsCreatorsPercent) / 100);
    int $distributedSum = ((($liquidityAmount + $animalHelperAmount) + $projectAmount) + $investorsCreatorsAmount);
    throw_unless(13131, ($distributedSum <= $amount));
    int $successCount = 0;
    int $sentAmount = 0;
    if (($liquidityAmount >= $self'minDistributionAmount)) {
        int $lockAmount = (($liquidityAmount * $self'lockPercent) / 100);
        int $directAmount = ($liquidityAmount - $lockAmount);
        if (($directAmount >= $self'minDistributionAmount)) {
            int $success = ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_sendFunds($self'liquidityPool, $directAmount, $queryId);
            if ($success) {
                $successCount = $successCount += 1;
                $sentAmount = $sentAmount += $directAmount;
            }
        }
        if (($lockAmount >= $self'minDistributionAmount)) {
            int $success = ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_sendFunds($self'liquidityLock, $lockAmount, $queryId);
            if ($success) {
                $successCount = $successCount += 1;
                $sentAmount = $sentAmount += $lockAmount;
            }
        }
    }
    if (($animalHelperAmount >= $self'minDistributionAmount)) {
        int $success = ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_sendFunds($self'animalHelperPool, $animalHelperAmount, $queryId);
        if ($success) {
            $successCount = $successCount += 1;
            $sentAmount = $sentAmount += $animalHelperAmount;
        }
    }
    if (($projectAmount >= $self'minDistributionAmount)) {
        int $success = ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_sendFunds($self'projectPool, $projectAmount, $queryId);
        if ($success) {
            $successCount = $successCount += 1;
            $sentAmount = $sentAmount += $projectAmount;
        }
    }
    if (($investorsCreatorsAmount >= $self'minDistributionAmount)) {
        int $success = ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_sendFunds($self'investorsCreatorsPool, $investorsCreatorsAmount, $queryId);
        if ($success) {
            $successCount = $successCount += 1;
            $sentAmount = $sentAmount += $investorsCreatorsAmount;
        }
    }
    $self'transactionMetrics'successCount = $self'transactionMetrics'successCount += $successCount;
    $self'transactionMetrics'failCount = $self'transactionMetrics'failCount += (5 - $successCount);
    $self'transactionMetrics'totalSent = $self'transactionMetrics'totalSent += $sentAmount;
    return (($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)), ());
}

;;
;; Get methods of a Contract FundsDistributor
;;

_ %owner() method_id(83229) {
    var self = $FundsDistributor$_contract_load();
    var res = self~$FundsDistributor$_fun_owner();
    return res;
}

;;
;; Routing of a Contract FundsDistributor
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)) = $FundsDistributor$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive EmergencyWithdrawMessage message
        if (op == 3855890798) {
            var ($msg'queryId) = in_msg~$EmergencyWithdrawMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_context_get_sender(), false, 0, 129));
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateLiquidityPoolMessage message
        if (op == 2925792993) {
            var ($msg'queryId, $msg'new_address) = in_msg~$UpdateLiquidityPoolMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            $self'liquidityPool = $msg'new_address;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateLiquidityLockMessage message
        if (op == 562200191) {
            var ($msg'queryId, $msg'new_address) = in_msg~$UpdateLiquidityLockMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            $self'liquidityLock = $msg'new_address;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateLockRatioMessage message
        if (op == 2559550766) {
            var ($msg'queryId, $msg'lock_percent) = in_msg~$UpdateLockRatioMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            throw_unless(38995, ( (($msg'lock_percent >= 0)) ? (($msg'lock_percent <= 100)) : (false) ));
            $self'lockPercent = $msg'lock_percent;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateAnimalHelperPoolMessage message
        if (op == 1357296989) {
            var ($msg'queryId, $msg'new_address) = in_msg~$UpdateAnimalHelperPoolMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            $self'animalHelperPool = $msg'new_address;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateProjectPoolMessage message
        if (op == 3020695181) {
            var ($msg'queryId, $msg'new_address) = in_msg~$UpdateProjectPoolMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            $self'projectPool = $msg'new_address;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateInvestorsCreatorsPoolMessage message
        if (op == 3245794019) {
            var ($msg'queryId, $msg'new_address) = in_msg~$UpdateInvestorsCreatorsPoolMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            $self'investorsCreatorsPool = $msg'new_address;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive UpdateDistributionRatioMessage message
        if (op == 2820705846) {
            var ($msg'queryId, $msg'liq_percent, $msg'animal_percent, $msg'proj_percent, $msg'inv_creat_percent) = in_msg~$UpdateDistributionRatioMessage$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
            int $total_percent = ((($msg'liq_percent + $msg'animal_percent) + $msg'proj_percent) + $msg'inv_creat_percent);
            throw_unless(52463, ($total_percent == 100));
            $self'liquidityPercent = $msg'liq_percent;
            $self'animalHelperPercent = $msg'animal_percent;
            $self'projectPercent = $msg'proj_percent;
            $self'investorsCreatorsPercent = $msg'inv_creat_percent;
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
        ;; Receive Deploy message
        if (op == 0x946a98b6) {
            var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
            ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
            $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
            return ();
        }
        
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        int $gasAmount = $global_min(50000000, ($Context$_get_value(__tact_context_get()) / 10));
        int $totalAmount = ($Context$_get_value(__tact_context_get()) - $gasAmount);
        throw_unless(33719, ($totalAmount >= $self'minDistributionAmount));
        ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_validatePoolAddresses();
        ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_distributeAmount($totalAmount, 0);
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "getConfig" message
    if (text_op == 0x657e718d769fdc45d75f970e06cc870ac82d38d629dfd83c69b838dcbb86501b) {
        cell $configData = $Builder$_fun_endCell(store_uint(store_uint(store_uint(store_uint(store_uint($Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeAddress($Builder$_fun_storeAddress($global_beginCell(), $self'owner), $self'liquidityPool), $self'liquidityLock), $self'animalHelperPool), $self'projectPool), $self'investorsCreatorsPool), $self'liquidityPercent, 8), $self'animalHelperPercent, 8), $self'projectPercent, 8), $self'investorsCreatorsPercent, 8), $self'lockPercent, 8));
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 65, $configData));
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "getMetrics" message
    if (text_op == 0xd6e7c39a8f757dc7b2b81517576ae419adcd53b20b1c3facdcf6a7c3a46bad11) {
        cell $metricsData = $Builder$_fun_endCell($Builder$_fun_storeCoins(store_uint(store_uint($global_beginCell(), $self'transactionMetrics'successCount, 64), $self'transactionMetrics'failCount, 64), $self'transactionMetrics'totalSent));
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 65, $metricsData));
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "proposeAdminAction" message
    if (text_op == 0x7488d8501894e44bda39a329ca293e461bc4d93b06bda46f3a4339cab2f3f63a) {
        throw_unless(15038, ( (( equal_slices_bits($self'owner, __tact_context_get_sender()) )) ? (true) : (( ((~ null?($self'adminConfig'tempAdmin))) ? (( equal_slices_bits(__tact_not_null($self'adminConfig'tempAdmin), __tact_context_get_sender()) )) : (false) )) ));
        cell $proposalData = $Builder$_fun_endCell($Builder$_fun_storeSlice(store_uint($Builder$_fun_storeAddress($global_beginCell(), __tact_context_get_sender()), $global_now(), 64), $Context$_get_raw(__tact_context_get())));
        int $proposalId = $self'adminConfig'proposalId;
        $self'adminConfig'pendingProposals~__tact_dict_set_int_cell(257, $proposalId, $proposalData);
        $self'adminConfig'proposalId = $self'adminConfig'proposalId += 1;
        $self'adminConfig'lockUntil = ($global_now() + 86400);
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "confirmAdminAction" message
    if (text_op == 0xc5f4ed1ab0d491da8eb463aef393dcb6f3f70f03bfdadb9ed03ce082ca27722f) {
        slice $slice = $Context$_get_raw(__tact_context_get());
        int $proposalId = $slice~load_uint(32);
        cell $proposalOpt = __tact_dict_get_int_cell($self'adminConfig'pendingProposals, 257, $proposalId);
        throw_unless(59037, (~ null?($proposalOpt)));
        cell $proposal = __tact_not_null($proposalOpt);
        slice $proposalSlice = $Cell$_fun_beginParse($proposal);
        slice $proposer = $proposalSlice~$Slice$_fun_loadAddress();
        int $proposalTime = $proposalSlice~load_uint(64);
        throw_unless(13935, ( ~ equal_slices_bits($proposer, __tact_context_get_sender()) ));
        ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
        throw_unless(8723, (($global_now() - $proposalTime) <= 604800));
        slice $actionData = $Cell$_fun_beginParse($proposalSlice~$Slice$_fun_loadRef());
        int $actionType = $actionData~load_uint(32);
        if (($actionType == 1)) {
            int $poolType = $actionData~load_uint(8);
            slice $newAddress = $actionData~$Slice$_fun_loadAddress();
            if (($poolType == 1)) {
                $self'liquidityPool = $newAddress;
            } elseif (($poolType == 2)) {
                $self'liquidityLock = $newAddress;
            } elseif (($poolType == 3)) {
                $self'animalHelperPool = $newAddress;
            } elseif (($poolType == 4)) {
                $self'projectPool = $newAddress;
            } elseif (($poolType == 5)) {
                $self'investorsCreatorsPool = $newAddress;
            }
        } elseif (($actionType == 2)) {
            int $liq = $actionData~load_uint(8);
            int $animal = $actionData~load_uint(8);
            int $proj = $actionData~load_uint(8);
            int $inv = $actionData~load_uint(8);
            throw_unless(52463, (((($liq + $animal) + $proj) + $inv) == 100));
            $self'liquidityPercent = $liq;
            $self'animalHelperPercent = $animal;
            $self'projectPercent = $proj;
            $self'investorsCreatorsPercent = $inv;
        } elseif (($actionType == 3)) {
            int $lockPerc = $actionData~load_uint(8);
            throw_unless(38995, ( (($lockPerc >= 0)) ? (($lockPerc <= 100)) : (false) ));
            $self'lockPercent = $lockPerc;
        }
        $self'adminConfig'pendingProposals~__tact_dict_set_int_cell(257, $proposalId, null());
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "setTempAdmin" message
    if (text_op == 0x433c5cbf3a412203a138815cca7fccea8573317c174bf1efc26210b9454e7c6e) {
        throw_unless(63750, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        slice $slice = $Context$_get_raw(__tact_context_get());
        slice $tempAdmin = $slice~$Slice$_fun_loadAddress();
        $self'adminConfig'tempAdmin = $tempAdmin;
        $self'adminConfig'lockUntil = ($global_now() + 86400);
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "setRecoveryAddress" message
    if (text_op == 0xb4b26b3a4915a4e998322bfa9d1de0eed461187c6d53a65fac6a94d79347b7ed) {
        throw_unless(50578, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        slice $slice = $Context$_get_raw(__tact_context_get());
        slice $recoveryAddress = $slice~$Slice$_fun_loadAddress();
        $self'adminConfig'recoveryAddress = $recoveryAddress;
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "recoveryAccess" message
    if (text_op == 0x38c575c9b696913cfb631dda1cf89b8d35bc3fdc581c1dfa0f0b9217bec565a2) {
        throw_unless(23144, ( equal_slices_bits($self'adminConfig'recoveryAddress, __tact_context_get_sender()) ));
        throw_unless(63477, ($global_now() > ($self'adminConfig'lockUntil + 604800)));
        slice $slice = $Context$_get_raw(__tact_context_get());
        slice $newOwner = $slice~$Slice$_fun_loadAddress();
        $self'owner = $newOwner;
        $self'adminConfig'tempAdmin = null();
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Receive "updateMinDistributionAmount" message
    if (text_op == 0xa6a153690c8b074c47bd8ed835ad4862e2ba9117825b808cc70516f1f136d0f5) {
        ($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent))~$FundsDistributor$_fun_requireAdmin();
        slice $slice = $Context$_get_raw(__tact_context_get());
        int $newAmount = $slice~$Slice$_fun_loadCoins();
        throw_unless(61135, ($newAmount > 0));
        $self'minDistributionAmount = $newAmount;
        $FundsDistributor$_contract_store(($self'owner, $self'liquidityPool, $self'liquidityLock, $self'animalHelperPool, $self'projectPool, $self'investorsCreatorsPool, $self'liquidityPercent, $self'animalHelperPercent, $self'projectPercent, $self'investorsCreatorsPercent, $self'lockPercent, $self'minDistributionAmount, ($self'adminConfig'tempAdmin, $self'adminConfig'recoveryAddress, $self'adminConfig'lockUntil, $self'adminConfig'proposalId, $self'adminConfig'pendingProposals), ($self'transactionMetrics'successCount, $self'transactionMetrics'failCount, $self'transactionMetrics'totalSent)));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.
            
            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
            
            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot 
                swap
                
                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop 
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop 
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop 

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap
                
                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll 
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop 
                } 
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond
                
                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll 
                { 
                    // If the dict is empty, throw 11
                    11 THROWARG 
                } 
                { 
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX 
                } cond 
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}